# ############################## Arrays
# --> CONTE√öDO do dia - 36.2 - <--- / INICIO ----------------------------- //
# ############################## Arrays

# 1 - O problema das notas
# 2 - Por que arrays?
# 3 - Entendendo a estrutura
# 4 - Arrays multidimensionais e outras opera√ß√µes
# 5 - Arrays no Pythonverso

""" ---> OBJETIVO <---
- Entender o que s√£o estruturas de dados ( ED )
- Entender o que s√£o tipos abstratos de dados ( TAD )
- Reconhecer arrays e seu funcionamento em baixo n√≠vel
- Aplicar arrays multi-dimensionais;
"""


# ---> Conte√∫dos <---


"""  --------------------------------------------------------------------------
| -> O problema das notas <-                                                  |
--------------------------------------------------------------------------- """

# Em uma escola, o sistema precisa armazenar todas as notas das provas, de cada estudante, de uma turma para uma determinada mat√©ria.
# Quando selecionado um estudante, o sistema deve calcular a soma das notas para verificar se o/a estudante foi aprovado ou n√£o.
# Este estudante possui quatro notas referentes √† provas e trabalhos e caso n√£o seja aprovado, tem direito a uma prova de recupera√ß√£o.
estudante1_matematica_prova1 = 10
estudante1_matematica_prova2 = 8
estudante1_matematica_prova3 = 9
estudante2_matematica_prova1 = 9
estudante2_matematica_prova2 = 6
estudante2_matematica_prova3 = 10

# üí° Em python n√£o existem tipos primitivos, tudo √© objeto.
# Por exemplo, experimente em um terminal interativo "(5).bit_length()".
# Viu que conseguimos chamar um m√©todo at√© mesmo de um n√∫mero?
# Podemos fazer isso, pois, assim como todo objeto, um n√∫mero possui atributo e comportamento.

# Precisamos de uma forma din√¢mica para armazenar de forma organizada dados, como as notas por exemplo. Vamos tentar usar uma lista:
turma_A_matematica = [
    ["Estudante1", 10, 8, 9],
    ["Estudante2", 9, 6, 10],
    # ...
]
# Neste caso, a Estrutura De Dados utilizada √© a lista, e ela armazena dados do tipo "int" e dados do tipo "string". Note que a lista √© uma estrutura de dados, mas tamb√©m √© um dado do tipo "list". Nesse exemplo, temos uma lista de listas.

""" Estruturas de dados(ED) """
# s√£o implementa√ß√µes de ideias de como organizar os dados.
# Existem muitas formas de organizar dados, e cada uma tem diferentes m√©todos de acesso e inser√ß√£o, que podem levar mais ou menos tempo, e ocupam uma quantidade de mem√≥ria diferente.
# Estas particularidades determinam qual estrutura devemos utilizar para resolver cada problema.

""" Tipos Abstratos de Dados(TAD) """
# √© um documento que serve para definir estruturas de dados com base em como s√£o usadas e os comportamentos que fornecem.
# Eles n√£o especificam como a estrutura de dados deve ser implementada, mas simplesmente fornecem uma interface m√≠nima esperada e um conjunto de comportamentos.
# Pense assim, para voc√™ poder chamar um objeto de "carro", ele deve ter pelo menos as seguintes caracter√≠sticas:
# - Quatro rodas
# - Volante, acelerador, freio
# - Ser movido a motor
# - Espa√ßo para pelo menos 1 motorista, e talvez passageiros

""" Exerc√≠cio de Fixa√ß√£o """
# - 1 Tipos abstratos de dados possuem uma √∫nica implementa√ß√£o bem documentada?
""" R= """
# √© um documento que serve para definir estruturas de dados com base em como s√£o usadas e os comportamentos que fornecem.
# Eles n√£o especificam como a estrutura de dados deve ser implementada, mas simplesmente fornecem uma interface m√≠nima esperada e um conjunto de comportamentos.

# - 2 Listas(list), dicion√°rios(dict) e conjuntos(set), que j√° v√™m no Python, s√£o considerados tipos de dados?
# Caso negativo, justifique sua resposta.
""" R= """
# Sim!

# - Voltando ao nosso problema de notas, precisamos de uma estrutura onde os elementos (dados) sejam de f√°cil acesso, facilmente percorr√≠vel e que mantenha as notas ordenadas.


"""  --------------------------------------------------------------------------
| -> Por que arrays?                                                          |
--------------------------------------------------------------------------  """
# - Array √© um tipo abstrato de dado ( TAD ) que possui uma cole√ß√£o de elementos que s√£o acessados atrav√©s do √≠ndice. Um array pode armazenar todo o tipo de dado e estes normalmente s√£o de tipos homog√™neos, ou seja, do mesmo tipo.

# üí° Em python, listas armazenam somente uma refer√™ncia a um objeto. Portanto, um objeto armazenado em uma lista, modificado posteriormente, ser√° modificado na lista.

# A principal caracter√≠stica de um array √© que elementos s√£o armazenados e recuperados atrav√©s de √≠ndices, o mesmo √≠ndice utilizado para adicionar um elemento pode ser utilizado para a sua recupera√ß√£o.

# Devemos implementar pelo menos um jeito de recuperar e armazenar um dado atrav√©s do √≠ndice.
""" ./array_example.py """

# Relembrando o problema das notas, como arrays s√£o estruturas eficientes para consultas, podemos buscar um estudante, atrav√©s de um √≠ndice, e percorrer suas notas de uma maneira eficaz. Ainda temos o detalhe de que n√£o ocorrem tantas inser√ß√µes de notas, somente quando um estudante entrar em recupera√ß√£o.


"""  --------------------------------------------------------------------------
| -> Entendendo a estrutura                                                   |
--------------------------------------------------------------------------  """

# Para entender o que acontece a cada inser√ß√£o em um array, devemos entender o comportamento de uma lista(list).
""" ./array_example2.py """

# Quando inicializamos nossa estrutura array e internamente inicializamos uma lista(list) vazia, adicionando alguns itens, um espa√ßo adicional √© reservado para armazenar os itens.
# O tamanho de cada slot √© baseado no tamanho da estrutura que vamos armazenar (refer√™ncia para objetos no caso do Python).

# A lista cresceu de tamanho √† medida que adicionamos novos itens.
# De acordo com a documenta√ß√£o da linguagem Python, a cada vez que um elemento √© inserido, a lista cresce o seu tamanho em 1.125.

# quando h√° um crescimento, um novo endere√ßo na mem√≥ria √© reservado para uma nova lista.
# Em seguida, os elementos s√£o copiados da lista original para a nova, e ent√£o o novo elemento √© adicionado ao espa√ßo de mem√≥ria da nova lista.

# Supondo uma lista com 4 valores num√©ricos:
"""         *---*---*---*---*
original    | 1 | 2 | 3 | 4 |   posi√ß√£o na mem√≥ria: 0x01
            *---*---*---*---*

# Ao adicionar um novo item, a lista precisa crescer:
            *---*
novo item   | 5 |
            *---*
            *---*---*---*---*
original    | 1 | 2 | 3 | 4 |    posi√ß√£o na mem√≥ria: 0x01
            *---*---*---*---*

# Uma nova lista √© criada:
            *---*---*---*---*---*---*---*---*
nova        |   |   |   |   |   |   |   |   |    posi√ß√£o na mem√≥ria: 0x1A
            *---*---*---*---*---*---*---*---*

# Os elementos da lista original s√£o copiados para a nova lista:
            *---*---*---*---*
original    | 1 | 2 | 3 | 4 |    posi√ß√£o na mem√≥ria: 0x01
            *---*---*---*---*
              ‚Üì   ‚Üì   ‚Üì   ‚Üì
            *---*---*---*---*---*---*---*---*
nova        | 1 | 2 | 3 | 4 |   |   |   |   |    posi√ß√£o na mem√≥ria: 0x1A
            *---*---*---*---*---*---*---*---*

# O novo elemento √© colocado na nova lista:
            *---*
novo item   | 5 | -------------
            *---*             ‚Üì
            *---*---*---*---*---*---*---*---*
nova        | 1 | 2 | 3 | 4 |   |   |   |   |    posi√ß√£o na mem√≥ria: 0x1A
            *---*---*---*---*---*---*---*---*

# O endere√ßo onde se encontrava a lista antiga √© liberado para ser utilizado
# e o "nome original" √© atribu√≠do a nova lista:
            *---*---*---*---*---*---*---*---*
original    | 1 | 2 | 3 | 4 | 5 |   |   |   |    posi√ß√£o na mem√≥ria: 0x1A
            *---*---*---*---*---*---*---*---* """

# Essa organiza√ß√£o em espa√ßos cont√≠nuos em mem√≥ria torna o acesso a √≠ndices muito eficiente, pois basta pegar o endere√ßo em mem√≥ria do primeiro elemento e somar ao √≠ndice, multiplicando pelo tamanho do tipo armazenado e teremos o valor daquela posi√ß√£o.
# Posso ter dez, cem ou mil itens que o tempo para acessar o valor pelo √≠ndice ser√° o mesmo.

# Quando inserimos um novo elemento no in√≠cio do array, todos os elementos j√° existentes s√£o deslocados √† direita, tendo seu √≠ndice modificado em 1. An√°logo a isto, quando adicionamos em uma posi√ß√£o intermedi√°ria, todos os elementos com √≠ndices posteriores ao inserido ser√£o movidos em uma posi√ß√£o.
""" # Supondo uma lista com 4 caracteres ao qual adicionaremos mais um no in√≠cio:
            *---*
novo item   | a |
            *---*
              ‚Üì
            *---*---*---*---*
original    | b | c | d |   |    posi√ß√£o na mem√≥ria: 0x01
            *---*---*---*---*
                ‚§ª  ‚§ª  ‚§ª

# Os elementos s√£o deslocados para o pr√≥ximo √≠ndice.

            *---*---*---*---*
original    | a | b | c | d |    posi√ß√£o na mem√≥ria: 0x01
            *---*---*---*---*


# As regras de crescimento ainda se aplicam portanto pode ser que uma nova lista
# seja criada, o elemento adicionado e os elementos copiados para a nova lista.
# Ainda assim, o √≠ndice de todos os elementos posteriores a inser√ß√£o
# ser√£o acrescidos em 1. """

# O mesmo acontece se inserirmos um novo elemento no meio da lista:
""" # Supondo uma lista com 3 caracteres ao qual adicionaremos mais um na segunda posi√ß√£o, vulgo √≠ndice 1:
(inserimos b na posi√ß√£o 1).

                *---*
novo item       | b |
                *---*
                  ‚Üì
            *---*---*---*---*
original    | a | c | d |   |    posi√ß√£o na mem√≥ria: 0x01
            *---*---*---*---*
                    ‚§ª  ‚§ª

# O resultado final seria:
            *---*---*---*---*
original    | a | b | c | d |    posi√ß√£o na mem√≥ria: 0x01
            *---*---*---*---* """

# Algo similar ocorre quando fazemos remo√ß√µes de valores √† partir dos √≠ndices:
""" # Supondo uma lista com 4 caracteres ao qual removeremos um elemento

# Se removermos o √∫ltimo elemento (√≠ndice 3), nada precisa ser modificado

         *---*---*---*---*
array    | a | b | c |   |    posi√ß√£o na mem√≥ria: 0x01
         *---*---*---*-‚§π-*
                        d

# Por√©m se removermos o primeiro, ou qualquer outro √≠ndice,
# todos os valores ser√£o deslocados √† esquerda:
                 ‚§∫  ‚§∫  ‚§∫
         *---*---*---*---*---*---*---*---*
array    | a |   | c | d | e |   |   |   |    posi√ß√£o na mem√≥ria: 0x01
         *---*-‚§π-*---*---*---*---*---*---*
                b

# √Ä medida que itens s√£o removidos, a estrutura diminui em tamanho:
         *---*---*---*---*
array    | a | c | d | e |    posi√ß√£o na mem√≥ria: 0x01
         *---*---*---*---* """


""" Exerc√≠cio de Fixa√ß√£o """
# 3 Que tal adicionarmos um m√©todo update que atualiza o valor a partir de um √≠ndice?
# üê¶ A assinatura deve ser def update(self, index, value):
""" R= """


"""  --------------------------------------------------------------------------
 -> Arrays multidimensionais e outras opera√ß√µes
--------------------------------------------------------------------------- """
# - Arrays podem ser estendidas para um n√∫mero N de dimens√µes.
# Isto pode ser bastante √∫til para modelagens de matrizes, tabuleiros em jogos ou problemas que envolvam tabela de dados.

""" multidimensional_array_example.py """

# list √© uma implementa√ß√£o do TAD Array , e embora aqui tenhamos utilizado uma nova classe para escrever a estrutura de dados array , isto est√° cheirando muito a um MiddleMan. Portanto vamos remover o intermedi√°rio e utilizar diretamente a classe.
""" functions_examples.py """


"""  --------------------------------------------------------------------------
 -> Arrays no Pythonverso
--------------------------------------------------------------------------- """
# Arrays no Python em outras implementa√ß√µes al√©m do tipo "list".

""" M√≥dulo array """
# Este m√≥dulo que j√° vem na linguagem Python, cont√©m uma implementa√ß√£o de arrays compacta e otimizada para "valores b√°sicos" como caracteres, n√∫meros inteiros e ponto flutuante.
""" ./module_array_example.py """
# Um exemplo de utiliza√ß√£o deste array pode ser para armazenar avalia√ß√µes de um motorista em um sistema de motoristas particulares.

""" Numpy """
# - Pacote fundamental para computa√ß√£o cient√≠fica em Python, possui uma implementa√ß√£o r√°pida e vers√°til para array de n-dimens√µes.
# üê¶ Para usar o Numpy devemos instal√°-lo atrav√©s do pip
#  python3 -m pip install numpy

""" numpy_array_example.py """


# --------------------------------------------------------------------------- #
# - > CONTE√öDO do dia - 36.2 - <--- / FIM ---------------------------------- //
# #####################################
# - > AULA ao VIVO - 36.2 ----- <--- / INICIO ------------------------------ //
# --------------------------------------------------------------------------- #

# Foco de hoje
# ...Arrays(list)

# Estruturas de Dados
# - Filas (um a um, at√© chegar no ultimo)
# - Pilhas (ultimo que entra e o primeiro a sair)
# - Matriz (semelhante ao jogo da velha(linhas e colunas))
# - √Årvore ()
# - Hashmap ()

# exemplo_a = [1, 2, 3]
# exemplo_b = exemplo_a
# exemplo_a[0] = 9
# exemplo_a
# [9, 2, 3]
# exemplo_b
# [9, 2, 3]

""" copy """
# exemplo_b = exemplo_a.copy()
# exemplo_a[0] = 0
# exemplo_a
# [0, 2, 3]
# exemplo_b
# [9, 2, 3]

""" LIST(array) e seus poderes """
# https://docs.python.org/3/tutorial/datastructures.html

list.append('x')        # insere
list.remove('x')        # remove o 1¬∞ elemento encontrado
list.copy()           # cria uma c√≥pia
list.sort()           # Ordenar os elementos
list.insert('i','x')      # 
list.clear()          # limpa a list(array)
list.count('x')         # conta o numero de vezes que o elemento se repete
list.reverse()        # inverte de tr√°s pra frente
list.pop()            # remove o elemento pelo indice ou o ultimo se o indice n√£o for apontado
list.extend()         # 
list.index()          # 
min(list), max(list)  # pega o valor m√°ximo ou o m√≠nimo
 
# Sequ√™ncia para resolver algoritmos:
""" 
- Entender
- Pensar
- Codar
"""

""" Problema 1- Cont√©m Duplicado """
# Dado um array de n√∫meros,
# verifiquem se o array possui algum elemento duplicado.
# Sua fun√ß√£o deve retornar True
# se algum valor aparece pelo menos duas vezes no array
# e False caso todos os elementos sejam distintos.
""" ./1-duplicado.py """


""" Problema 2- Remodele a Matriz """
# Em softwares cient√≠ficos,
# existe uma fun√ß√£o bastante √∫til chamada reshape
# que √© capaz de remodelar a matriz em uma nova com
# tamanho diferente,por√©m mantendo os dados originais.
# Se algum erro ocorrer na remodelagem, a matriz original
# deve ser retornada.
""" ./2-remodelagem.py """


""" Problema 3- Melhor par de passeios tur√≠sticos """
# Dado um array de n√∫meros inteiros que representam uma
# avalia√ß√£o a respeito de um ponto tur√≠stico.
# E a dist√¢ncia entre seus √≠ndices representam a dist√¢ncia
# entre os pontos tur√≠sticos
# Calcule a m√°xima pontua√ß√£o obtida a partir
# de um par de pontos tur√≠sticos.
# Para calcular a pontua√ß√£o some as avalia√ß√µes dos dois
# pontos e em seguida subtraia a dist√¢ncia entre eles.
""" ./3-melhorpar.py """


# --------------------------------------------------------------------------- #
# - > AULA ao VIVO - 36.2 ----- <--- / FIM --------------------------------- //
# #####################################
# - > EXERC√çCIO do dia - 36.2 - <--- / INICIO ------------------------------ //
# --------------------------------------------------------------------------- #

# Agora a pr√°tica

""" Exerc√≠cio 1 """
# Em um software monitor, que verifica a resili√™ncia de outro software, precisamos saber qual o tempo m√°ximo que um software permaneceu sem instabilidades.
# Para isto, a cada hora √© feito uma requisi√ß√£o ao sistema e verificamos se est√° ok.
# Supondo um array que contenha os estados coletados por nosso software, calcule quanto tempo m√°ximo que o servidor permaneceu sem instabilidades.
# 1 - OK
# 0 - Instabilidades
# valores_coletados = [0, 1, 1, 1, 0, 0, 1, 1]
# resultado = 3
# valores_coletados = [1, 1, 1, 1, 0, 0, 1, 1]
# resultado = 4
""" R= ./ex1.py """

""" Exerc√≠cio 2 """
# Em um jogo de baralho, as cartas est√£o representadas por um array num√©rico.
# Para iniciar o jogo devemos embaralhar as cartas.
# Faremos isto dividindo uma por√ß√£o de cartas em 2 e depois mesclando as duas por√ß√µes.
# Exemplo 1:
# cartas = [2, 6, 4, 5]
# cartas por parte = 2
# resultado = [2, 4, 6, 5]
# Exemplo 2:
# cartas = [1, 4, 4, 7, 6, 6]
# cartas por parte = 3
# resultado = [1, 7, 4, 6, 4, 6]
""" R= ./ex2.py """

""" Exerc√≠cio 3 """
# Dado um array de n√∫meros inteiros que representam produtos em um e-commerce.
# Verifique quantos produtos formam boas combina√ß√µes, considerando que uma boa combina√ß√£o √© quando um produto √© igual ao outro e seu √≠ndice √© maior que o anterior.
# Esta combina√ß√£o pode ser utilizada para modificar os produtos de uma p√°gina.
# Exemplo 1:
# produtos = [1, 3, 1, 1, 2, 3]
# resultado = 4
# Os √≠ndices (0, 2), (0, 3), (1, 5), (2, 3) formam combina√ß√µes.
# Exemplo 2:
# produtos = [1, 1, 2, 3]
# resultado = 1
# Os √≠ndices (0, 1) formam a √∫nica combina√ß√£o.
""" R= ./ex3.py """

""" Exerc√≠cio 4 """
# Dado dois arrays de n√∫meros inteiros que representam instantes de entrada e sa√≠das em uma biblioteca e um n√∫mero que represente um instante a ser buscado.
# Retorne quantas pessoas estudantes est√£o na biblioteca naquele instante.
# Considere que todo estudante que entrou, saiu da biblioteca.
# entradas = [1, 2, 3]
# sa√≠das = [3, 2, 7]
# instante_buscado = 4
# resultado: 1
# O estudante 1 entrou no instante 1 e saiu no 3, j√° o segundo entrou
# e saiu no 2 e o √∫ltimo foi √∫nico a estar presente no instante 4.
""" R= ./ex4.py """

""" Exerc√≠cio 5 """
# Em um software gerenciador de servidores, precisamos verificar o n√∫mero de servidores que se comunicam.
# Os servidores est√£o representados como um array bidimensional onde o valor 1 representa um computador e 0 a aus√™ncia do mesmo.
# Dois servidores se comunicam se eles est√£o na mesma linha ou mesma coluna.
# servidores =  [[1,0],[0,1]]
# resultado: 0
# Linhas e colunas s√£o diferentes.
# servidores = [[1,0],[1,1]]
# resultado: 3
# Todos os servidores se comunicam com ao menos um outro servidor.
# servidores = [[1, 0, 0],
#               [1, 0, 0],
#               [0, 0, 1]]
# resultado: 2
# O servidor de √≠ndice (2, 2) n√£o possui nenhum outro na mesma linha e coluna.
""" R= ./ex5.py """


# --------------------------------------------------------------------------- #
# - > EXERC√çCIO do dia - 36.2 - <--- / FIM --------------------------------- //
# ################################ Arrays
# - Conclu√≠do \o/ ----------------------------------------------------------- #


""" Recursos adicionais (opcional) """
# Data structures: Python lists
# https://raul.dev/post/python_list_data_structure/

# Brilliant.org: Arrays ADT
# https://brilliant.org/wiki/arrays-adt/

# Sidenotes - Arrays - Lucas Magnum
# https://medium.com/@lucasmagnum/sidenotes-array-abstract-data-type-data-structure-b154140c8305

# Numpy Manual
# https://numpy.org/doc/stable/

# Documenta√ß√£o do m√≥dulo array
# https://docs.python.org/pt-br/3/library/array.html
