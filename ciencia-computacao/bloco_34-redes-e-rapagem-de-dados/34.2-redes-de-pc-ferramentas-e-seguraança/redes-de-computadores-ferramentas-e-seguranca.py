# ########################################## redes-de-computadores-ferramentas-e-seguraan√ßa
# --> CONTE√öDO do dia - 34.2 - <--- / INICIO ----------------------------- //
# ########################################## redes-de-computadores-ferramentas-e-seguraan√ßa

# Protocolos Seguros
# Firewall e Proxy
# Proxy

""" ---> OBJETIVO <---
- Entender o funcionamento de ataques como o DDoS;
- Entender o que √© e como realizar uma conex√£o segura utilizando SSH;
- Entender o que s√£o certificados e como a criptografia √© utilizada na internet;
- Entender o que s√£o proxies;
- Entender o que √© e como utilizar um firewall;
- Gerenciar regras no firewall padr√£o do linux.
"""


# ---> Conte√∫dos <---

"""  --------------------------------------------------------------------------- 
| -> Protocolos Seguros <-           # HTTPS, SSH, TLS e SSL                   |
---------------------------------------------------------------------------  """

""" SSL/TLS e HTTPS """

# Tanto o "SSL ( Secure Sockets Layer )" quanto o "TLS ( Transport Layer Security )" s√£o protocolos que implementam uma camada (layer) de seguran√ßa na rede, sendo o TLS o sucessor do SSL (simplificadamente). 

# "HTTPS (Hyper Text Transfer Protocol Secure)" √© o protocolo HTTP, com uma camada adicional de seguran√ßa utilizando o protocolo SSL/TLS.


"""  --------------------------------------------------------------------------- 
| -> Firewall e Proxy <-             # DoS / DDoS                              |
---------------------------------------------------------------------------  """

""" DDoS """
# (Distributed Denial of Service), ou ataque distribu√≠do de nega√ß√£o de servi√ßo.
# Esse ataque tem como objetivo tirar o servi√ßo do ar, tornando-o temporariamente indispon√≠vel.

""" Brute Force """
# "for√ßa bruta", onde indiv√≠duos, rob√¥s ou scripts maliciosos que tentam diversas combina√ß√µes de usu√°rio e senha, com o objetivo de encontrar as corretas e acessar indevidamente um sistema.

""" firewalls """
# Na maioria dos sistemas operacionais existem subsistemas de filtragem de pacotes e ferramentas para gerenciamento de firewall.

""" Iptables e Netfilter """
# O sistema padr√£o para filtragem de pacotes do linux √© o "Netfilter":
# http://netfilter.org/
# O "Iptables" √©, ent√£o, o firewall padr√£o do linux e est√° presente na maioria das distros.
# - Ele compara o tr√°fego de rede que recebe ou envia com um conjunto de regras pr√© estabelecidas. Essas regras definem as caracter√≠sticas que um pacote deve possuir e a a√ß√£o que deve ser tomada para esse tipo de pacote. Podemos criar regras por protocolo, porta de origem/destino, endere√ßo IP, entre outros.

#  Iptables √© formada por "tabelas". conhecidas como cadeias e cada uma possui tipos de regras espec√≠ficas. Por exemplo, a cadeia "filter" que possui todas pol√≠ticas (regras) respons√°veis por controlar o tr√°fego que entra ou sai do computador.

""" Fail2ban """
# √© um IPS ( Intrusion Prevention System - Sistema de Preven√ß√£o de intrusos).
# - Essa ferramenta, de maneira simples, monitora os logs da rede e, de maneira proativa, ao detectar comportamento suspeito, como diversas requisi√ß√µes de um mesmo IP ou diversas tentativas de login SSH, ele criar regras noiptables , de modo a rejeitar aquele endere√ßo de IP espec√≠fico por determinado tempo.


"""  --------------------------------------------------------------------------- 
| -> Proxy <-                                                                  |
---------------------------------------------------------------------------  """
# O proxy prov√©m uma camada a mais de controle entre a internet e os dispositivos da rede, e pode ser utilizado para diversos fins.

# Um uso comum dos proxies √© como uma esp√©cie de filtro que, atrav√©s de caracter√≠sticas de uma conex√£o, ou tr√°fego, consegue determinar se esse tr√°fego deve ser feito ou n√£o.

# para evitar acessos a redes sociais em escrit√≥rios o proxy pode ser utilizado para reconhecer palavras chaves em URLs e ent√£o recus√°-la. Al√©m disso, eles podem impedir que pessoas usu√°rias acessem sites com conte√∫dos impr√≥prios ou com potencial de ser uma p√°gina maliciosa.


# --------------------------------------------------------------------------- #
# - > CONTE√öDO do dia - 34.2 - <--- / FIM ---------------------------------- //
# #####################################
# - > AULA ao VIVO - 34.2 ----- <--- / INICIO ------------------------------ //
# --------------------------------------------------------------------------- #

# Foco de hoje
# ... redes-de-computadores-ferramentas-e-seguraan√ßa

""" Ferramentas: Ping, Traceroute, Proxy, SSH, VPN, Certificado SSL, Firewall, Fail2ban... """

# Ping - Packet Internet Network Group(Agrupador de pacotes da internet)
# - testa se a rota esta funcionando
# ‚îî‚îÄ# ping google.com
# ‚îî‚îÄ# ping -c 4 -s 50 www.google.com

# Traceroute
# - mostra o caminho percorrido at√© determinado site
# ‚îî‚îÄ# traceroute www.google.com

# Proxy
# - faz o redirecionamento, gerenciamendo de acesso, limita√ß√£o de acesso

# SSH
# - conecta a outra maquina, via linha de comando
# ‚îî‚îÄ# ssh root@127.168.10.1

# VPN - Virtual Private Network
# - permite criar conex√µes privadas e mais seguras
# - VPN usa criptografia

# Certificado SSL
# - http (Sem SSL) site vuner√°vel
# - https (Com SSL) site mais seguro

# Firewall
# - controla as requisi√ß√µes, podendo aceitar ou bloquear

# Fail2ban
# - Limita o numero de tentativas de acesso

# Iptables
# - bloquei conex√µes(local) e ou endere√ßos IP

# Terminal-1, faz o ping
# ‚îî‚îÄ# ping 127.0.0.1

# Terminal-2, cria a regra (-A)
# ‚îî‚îÄ# iptables -A INPUT -p icmp --icmp-type echo-request -j DROP (retorna um aviso)
# ‚îî‚îÄ# iptables -A INPUT -p icmp --icmp-type echo-request -j REJECT (n√£o retorna aviso)
# ‚îî‚îÄ# iptables -A INPUT -p icmp --icmp-type echo-request -m limit --limit 6/minute -j ACCEPT (aceita)
# ‚îî‚îÄ# iptables -A INPUT -p icmp --icmp-type echo-request -j REJECT (rejeia a cada 10seg, de acordo co m a regra acima)

# Terminal-2, deleta a regra (-D)
# ‚îî‚îÄ# iptables -D INPUT -p icmp --icmp-type echo-request -j DROP

# verifica se a regra foi criada e ou deletada
# ‚îî‚îÄ# iptables -L

# Apaga todas as regras
# ‚îî‚îÄ# iptables --flush


# --------------------------------------------------------------------------- #
# - > AULA ao VIVO - 34.2 ----- <--- / FIM --------------------------------- //
# #####################################
# - > EXERC√çCIO do dia - 34.2 - <--- / INICIO ------------------------------ //
# --------------------------------------------------------------------------- #

# Agora a pr√°tica

# Exerc√≠cio 1 : Defina uma regra de firewall utilizando o comando iptables -A , que bloqueie (block ou REJECT/DROP) toda a entrada(in ou INPUT) de pacotes utilizando o protocolo ICMP , impedindo assim que a m√°quina responda ao comando ping . Lembre-se, voc√™ pode executar o comando ping para validar se sua regra est√° funcionando corretamente: ping 127.0.0.1 (voc√™ pode adicionar o par√¢metro -O para exibir os pings rejeitados tamb√©m üòâ).
# R = ./bloqueio-firewall.py

# Exerc√≠cio 2 : Exclua a regra anterior utilizando o par√¢metro -D .
# R = ./bloqueio-firewall.py

# Exerc√≠cio 3 : Agora vamos criar uma regra para bloquear o tr√°fego HTTPS. Para isso, iremos bloquear a sa√≠da de pacotes ( out ou OUTPUT ). Lembre-se, a porta padr√£o para esse protocolo √© a 443 , para especific√°-la utilize o par√¢metro --sport . Ele utiliza tamb√©m o protocolo tcp . Para testar sua regra, tente acessar um site pelo navegador que use o protocolo, como o Youtube, o Google ou o Facebook.
# R = ./bloqueia-trafego-https.py

# Exerc√≠cio 4 : Bloqueie agora o tr√°fego de sa√≠da para HTTP. Lembre-se, tamb√©m √© utilizado o protocolo tcp e a porta 80 . Para testar sua regra, tente acessar um site pelo navegador que use HTTP .
# R = ./bloqueia-trafego-http.py

# Exerc√≠cio 5 : Para finalizar, vamos limpar todas as regras. Para isso, utilize o comando --flush do iptables (Linux).
# R = ./apaga-todas-as-regras.py

# Exerc√≠cio 6 : Agora, vamos utilizar um tipo de proxy bem legal que pode ser bastante √∫til no nosso dia como pessoas desenvolvedoras: o NGROK . Com ele conseguimos criar um t√∫nel para o nosso localhost .
# 6.1 - Crie um servidor HTTP em sua m√°quina executando na porta 80 , pode ser um front-end ou um back-end criado em aulas anteriores.
# 6.2 - Baixe o ngrok e extraia o arquivo baixado em uma pasta de sua prefer√™ncia, conforme instru√ß√µes no site oficial .
# 6.3 - Conforme instru√ß√µes do site, crie um t√∫nel para a porta 80 de sua m√°quina.
# 6.4 - Acesse o o link disponibilizado em seu navegador. Utilize ele para acessar de outros dispositivos, como seu smartphone ou outro computador üòé.
# ./criando-proxy.py

# Exerc√≠cio 7 : No conte√∫do vimos o que s√£o os protocolos SSL e TLS. Vamos subir nosso pr√≥prio servidor HTTPS, utilizando nosso pr√≥prio certificado!
# 7.1 - Vamos utilizar a ferramenta OpenSSL para gerar nossos certificados. Ela j√° vem instalada na maioria das distros Linux. No Docker, no entanto, voc√™ vai precisar executar:
# $ apt-get update && apt-get install python3 openssl
# R = ./cria-servidor-e-certificado.py

# 7.2 - Para gerar nosso pr√≥prio certificado auto-assinado, utilize os comandos abaixo. Lembrando que, como n√≥s estamos gerando o certificado, ele n√£o ser√° reconhecido por nenhuma entidade certificadora, de modo que ele s√≥ nos servir√° para utilizar o protocolo TLS com o HTTPS, n√£o sendo capaz de ser aceito pelo navegador.
# $ openssl genrsa -out key.pem
# $ openssl req -new -key key.pem -out csr.pem
# $ openssl x509 -req -days 9999 -in csr.pem -signkey key.pem -out cert.pem
# $ rm csr.pem
# R = ./cria-servidor-e-certificado.py

# 7.3 - Acabamos de gerar dois arquivos, o cert.pem (o certificado) e o key.pem (chave privada). Copie os dois arquivos para um diret√≥rio onde iremos criar nosso servidor HTTPS.
# R = ./cria-servidor-e-certificado.py

# 7.4 - Agora vamos escrever um servidor https usando os m√≥dulos nativos do python ssl e http.server . Embora esses m√≥dulos tenham muitos muitos recursos (muitos mesmo), n√≥s vamos usar apenas alguns. Tente seguir as instru√ß√µes a seguir:
# 7.4.1 Crie um contexto SSL com a classe SSLContext , usando o protocolo de vers√£o mais alta dispon√≠vel para servidores. (dica: as op√ß√µes est√£o listadas na documenta√ß√£o).
# 7.4.2 Carregue no contexto SSL a cadeia de certifica√ß√£o, passando tanto a o arquivo de certifica√ß√£o quanto a sua chave. (dica: existe um m√©todo para isso). 
# 7.4.3 Crie uma inst√¢ncia de HTTPServer . O endere√ßo deve ser uma tupla ('localhost', 8000) e para responder as requisi√ß√µes, use SimpleHTTPRequestHandler . (dica: apesar do exemplo na documenta√ß√£o, n√£o use with .) 
# 7.4.4 Crie um socket server-side usando o m√©todo wrap_socket do seu contexto SSL. Passe como par√¢metro o socket do servidor ( server.socket ). 
# 7.4.5 Substitua o socket do servidor pelo socket que vc acabou de criar. 
# 7.4.6 Execute o servidor com o m√©todo serve_forever .
# R = ./cria-servidor-e-certificado.py

# 7.5 - Acesse o servidor no endere√ßo https://localhost:8000/ utilizando o Firefox (precisa ser o Firefox!). Perceba que ele ir√° informar que o certificado n√£o √© reconhecido por ele, pois n√£o foi assinado por nenhuma autoridade da confian√ßa dele.
# 7.5.1 Chrome e Safari se recusam a acessar um site cujo certificado n√£o est√° assinado por NENHUMA autoridade certificadora (existem instru√ß√µes para agir como uma autoridade certificadora mas n√£o precisa seguir por esse caminho).
# R = ./cria-servidor-e-certificado.py

# 7.6 Acesse o servidor novamente, por√©m, desta vez utilizando cURL (de fora do Docker, se vc estiver usando).
# R = ./cria-servidor-e-certificado.py

# 7.7 Por √∫ltimo, vamos utilizar um recurso do cURL, somente para testes (somente utilize, caso realmente voc√™ esteja esperando por aquilo), que √© o par√¢metro -k ou --insecure . Com ele, falamos para o nosso cURL prosseguir a request mesmo sabendo que a conex√£o n√£o √© "confi√°vel".
# R = ./cria-servidor-e-certificado.py

# --------------------------------------------------------------------------- #
# - > EXERC√çCIO do dia - 34.2 - <--- / FIM --------------------------------- //
# ########################################## redes-de-computadores-ferramentas-e-seguraan√ßa
# - Conclu√≠do \o/ ------------------------------------------------------------ #
