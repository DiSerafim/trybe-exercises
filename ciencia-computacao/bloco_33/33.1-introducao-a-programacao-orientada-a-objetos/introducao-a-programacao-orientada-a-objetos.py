# ########################################## introducao-a-programacao-orientada-a-objetos
# --> CONTE√öDO do dia - 33.1 - <--- / INICIO ----------------------------- //
# ########################################## introducao-a-programacao-orientada-a-objetos

# Exemplo: recupera√ß√£o de senha
# Organizando a sua l√≥gica em entidades
# User, nossa primeira entidade
# Enviar emails - onde coloco essa l√≥gica?
# Dicion√°rio de conceitos
# Mailer - Criando mais entidades
# Dicion√°rio de conceitos, parte dois
# O que vem por a√≠

""" ---> OBJETIVO <---
- Definir Programa√ß√£o Orientada a Objetos como um paradigma de programa√ß√£o que √© base para in√∫meras arquiteturas de software
- Descrever Programa√ß√£o Orientada a Objetos como um paradigma baseado na cria√ß√£o de entidades que interagem entre si atrav√©s da troca de mensagens
- Definir, em Programa√ß√£o Orientada a Objetos , uma Classe
- Definir, em Programa√ß√£o Orientada a Objetos , um Construtor
- Definir, em Programa√ß√£o Orientada a Objetos , um Objeto
- Definir, em Programa√ß√£o Orientada a Objetos , uma Inst√¢ncia
- Definir, em Programa√ß√£o Orientada a Objetos , um Atributo
- Definir, em Programa√ß√£o Orientada a Objetos , um M√©todo
- Implementar, em Python , Classes , Inst√¢ncias , Atributos , M√©todos e envio de Mensagens entre Objetos
- Descrever, como pilar da Programa√ß√£o Orientada a Objetos , a Abstra√ß√£o - a cria√ß√£o de entidades que conter√£o, cada uma, parte da l√≥gica de seu programa
- Descrever, como pilar da Programa√ß√£o Orientada a Objetos , o Encapsulamento - a exposi√ß√£o somente do que √© necess√°rio para uso dos objetos de uma classe """


# ---> Conte√∫dos <---

"""  --------------------------------------------------------------------------- 
| -> Exemplo: recupera√ß√£o de senha <-                                          |
---------------------------------------------------------------------------  """

# Primeiramente, vamos definir em uma frase qual o problema que queremos resolver: Enquanto pessoa usu√°ria, eu quero recuperar minha senha atrav√©s de um email que receberei . Por enquanto... parece bom, certo?

# Exerc√≠cio de Fixa√ß√£o

# Antes de sair escrevendo, pense . Como voc√™ acha que faz sentido organizar o c√≥digo da sua funcionalidade? Desenhe, fa√ßa um esqueminha das entidades/arquivos/fun√ß√µes/o que for que voc√™ criar√°!

# Cronometre ‚è≤Ô∏è cinco minutos para pensar e siga adiante!


"""  --------------------------------------------------------------------------- 
| -> Organizando a sua l√≥gica em entidades                                     |
---------------------------------------------------------------------------  """

# Para pensar de forma Orientada a Objetos, fa√ßa, para cada problema que se quer resolver, a seguinte pergunta:
""" 
- Quem quer fazer o que e com o que ?
- No nosso caso, um User quer recuperar sua senha com seu email . Se partirmos da√≠, o que temos?
- Uma entidade User
- Uma a√ß√£o ou entidade de enviar emails
- Uma a√ß√£o ou entidade de recuperar senhas
"""


"""  --------------------------------------------------------------------------- 
| -> User, nossa primeira entidade                                             |
---------------------------------------------------------------------------  """
# User - √â algu√©m que quer recuperar uma senha por email.
# Esse algu√©m, portanto, tem um email e uma senha.
# Para identificarmos a pessoa, vamos dar um nome tamb√©m. Por enquanto, parece que √© s√≥ disso que precisamos.

# ./user.py
#  a palavra reservada 'class' √© usada, como "Uma entidade user cont√©m um nome, um email e uma senha".

# 'meu_user' uma vari√°vel que cont√©m... a 'entidade'! Temos nela os valores, os dados daquela 'entidade'.

""" Objetos no Python """
# - Toda classe capaz de criar objetos deve possuir um m√©todo construtor , que ser√° chamado quando o objeto estiver sendo criado.
# o m√©todo construtor √©, sempre, definido com o nome "__init__" no topo da classe que se est√° criando.
# ./user.py


"""  --------------------------------------------------------------------------- 
 -> Enviar emails - onde coloco essa l√≥gica?
---------------------------------------------------------------------------  """

# Para uma entidade saber fazer algo, precisamos definir nela uma fun√ß√£o que represente essa a√ß√£o. Algo assim:
# ./user.py

""" 
def reset_password(self):
        print("Envia email de reset de senha")

meu_user.reset_password()
"""
# No c√≥digo acima, estamos pedindo para meu_user resetar sua senha! N√£o nos interessa como a a√ß√£o ser√° feita, s√≥ nos interessa que ela ser√° feita!

# Se definimos numa classe uma fun√ß√£o, podemos chamar ela a partir do objeto que criamos!
# Quando pedimos para um objeto fazer algo, dizemos que estamos enviando uma mensagem √†quele objeto
# Na ess√™ncia, toda l√≥gica da orienta√ß√£o a objetos parte do envio de mensagens entre objetos.

# 1- O pilar de definir entidades chama-se "ABSTRA√á√ÇO".
# 2- O pilar de us√°-las sem entender como elas funcionam se chama "ENCAPSULAMENTO".


"""  --------------------------------------------------------------------------- 
 -> Dicion√°rio de conceitos
---------------------------------------------------------------------------  """

"""
-> Classe: Entidade "geral" que definimos com base no problema que queremos resolver.
-> Objeto: Entidade "espec√≠fica", criada a partir das regras definidas pela entidade "geral". Pense que a classe √© o molde e o objeto a escultura que o molde faz!
-> Inst√¢ncia: esse √© novo! Sabe quando criamos um objeto a partir de uma classe! Ent√£o! Dizemos que esse objeto √© uma inst√¢ncia dessa classe! Ou, tamb√©m, dizemos que a classe instanciou um objeto!
-> Atributo: outro novo! Um atributo √© uma informa√ß√£o de uma inst√¢ncia que voc√™ criou. O nome de um User, por exemplo.
-> Mensagem: Forma com que objetos interagem - chamando fun√ß√µes uns dos outros. Um chamado como esse √© um envio de mensagem a outro objeto. "User, resete sua senha!"
-> Abstra√ß√£o: Pilar da Programa√ß√£o Orientada a Objetos. Se refere a sempre criar entidades que far√£o as a√ß√µes que resolver√£o seu problema.
-> Encapsulamento: Pilar da Programa√ß√£o Orientada a Objetos. Se refere a poder instanciar uma entidade e enviar mensagens a ela sem saber como ela funciona por dentro
"""


"""  --------------------------------------------------------------------------- 
 -> Mailer - Criando mais entidades
---------------------------------------------------------------------------  """

# o "ssl" e o "smtplib". Ambos nos permitir√£o logar num servidor de emails e, de l√°, fazer um envio de forma segura atrav√©s da rede.
# Para conseguirmos fazer isso, precisaremos ter em m√£os algumas informa√ß√µes:
# - o email enviador,
# - a senha do email enviador,
# - o email que receber√° a mensagem,
# - o assunto e o corpo do email.

# Lembre-se do primeiro pilar de POO, a "Abstra√ß√£o" ! 
# Se uma l√≥gica parece n√£o pertencer a uma entidade, extraia-a para uma outra entidade, ou para uma entidade nova!

# No nosso caso, que tal criamos um enviador de emails?
# O nome faz sentido, n√£o faz? O nome mais literal poss√≠vel que podemos dar para uma entidade que envia emails √© Enviador de Emails .
# Em ingl√™s, Mailer

# ./user.py

# Assim resolvemos o nosso problema com o m√°ximo de l√≥gica encapsulada.
# E ao separarmos as nossas entidades , n√≥s deixamos a entidade Mailer, de quebra, muito mais gen√©rica!
# Ela n√£o precisa enviar s√≥ emails de reset de senha agora. Ela pode enviar quaisquer emails! ü§©

""" Mensagens e M√©todos """
# - O meu_user.reset_password(), pode ser lido como "Meu user, resete a sua senha!" .
# - Dentro da classe User , definimos a fun√ß√£o reset_password que ir√° conter a l√≥gica de resetar senha.
# - Fun√ß√µes que "respondem mensagens" se chamam "M√©todos"
# - Usualmente ela ser√° nomeada com um verbo ( 'Reset your password!' vira reset_password).
# - No contexto de POO, todas as intera√ß√µes s√£o feitas por troca de mensagens! voc√™ envia uma mensagem para um objeto ou voc√™ n√£o faz nada com ele. O bom Encapsulamento faz com que n√≥s s√≥ precisemos saber do nome de uma classe e seus m√©todos para interagir com ela. 
# No Python, mesmo quando voc√™ altera um atributo diretamente, por tr√°s dos panos o que ele faz √© enviar uma mensagem de atualiza√ß√£o para a classe!


"""  --------------------------------------------------------------------------- 
 -> Dicion√°rio de conceitos, parte dois
---------------------------------------------------------------------------  """

# Outra forma de resolver o problema do dia, com as classes `User`, `Mailer`, `EmailNotFoundError` e `UserService`

# User{ name, email, password}
# Mailer{ from_email, from_password, to_email, subject, message, send_email }
# EmailNotFoundError{ user, mailer, reset_password }
# UserService{ }

""" Classe """
# - Uma classe consiste numa esp√©cie de molde para cria√ß√£o de novos objetos, definindo seus atributos e m√©todos comuns que ser√£o utilizados por ele.

# User: Representa a entidade que armazenar√° as informa√ß√µes de uma pessoa usu√°ria;
# Mailer: Representa um gerenciador de envio de emails, que pode ser utilizado em qualquer parte do sistema;
# EmailNotFoundError: Representa uma exce√ß√£o customizada, que √© lan√ßada pelo gerenciador de envio de emails, caso n√£o seja poss√≠vel fazer este envio devido a algum dos emails n√£o existir;
# UserService: Representa um servi√ßo que implementa as regras de neg√≥cio associadas a uma pessoa usu√°ria, como por exemplo, o envio de um email de redefini√ß√£o de senha para o caso da pessoa ter esquecido sua senha.

""" Objeto/Inst√¢ncia """
# Com a classe criada, podemos instanciar um objeto. Instanciar √© o ato de criar um novo objeto/inst√¢ncia a partir da classe definida.

# mailer = Mailer(
#   "app-dev@email.com",
#   "123456",
#   "user@email.com"
# )
# Nesse exemplo criamos uma inst√¢ncia de um gerenciador de email com as informa√ß√µes passadas por par√¢metro.

""" Atributo """
# Atributos s√£o onde as informa√ß√µes de uma inst√¢ncia s√£o armazenadas. Eles representam o estado do objeto.

# User: Uma inst√¢ncia de User armazena informa√ß√µes de nome, email e senha de cada pessoa usu√°ria da nossa aplica√ß√£o;
# Mailer: Uma inst√¢ncia de Mailer armazena as informa√ß√µes de quem envia e quem recebe o email, seu assunto e seu conte√∫do;
# EmailNotFoundError: Classes n√£o precisam necessariamente ter atributos. Essa classe por exemplo, apenas representa um tipo de exce√ß√£o, n√£o definindo nenhum atributo;
# UserService: Atributos n√£o precisam armazenar apenas informa√ß√µes de tipos de dados primitivos, podendo armazenar tamb√©m inst√¢ncias de outras classes, ou at√© mesmo uma classe em si. Nesse caso, uma inst√¢ncia da classe UserService armazena uma inst√¢ncia de uma pessoa usu√°ria e uma classe de gerenciamento de emails.

""" M√©todo """
# - M√©todos s√£o fun√ß√µes que possuem acesso aos dados armazenados em atributos, podendo implementar comportamentos e alterar seus estados.

# Nomes como "redefinir_senha" ou "reset_password" poderiam ser utilizados para um m√©todo que implementa o comportamento de redefini√ß√£o de senha.

""" Construtor """
# √â um m√©todo especial utilizado para inicializar inst√¢ncias de uma classe e que pode receber par√¢metros usados para definir as informa√ß√µes armazenadas em seus atributos.

""" Abstra√ß√£o - Pilar da Programa√ß√£o Orientada a Objetos """
# - significa definir uma classe focando nas mensagens que ela responde e nos atributos de que precisa.

""" Encapsulamento - Pilar da Programa√ß√£o Orientada a Objetos """
# - Encapsulamento se trata de esconder parte da implementa√ß√£o de uma classe, exibindo de forma p√∫blica somente aquilo que √© necess√°rio para que o cliente consuma sua classe e deixando detalhes da implementa√ß√£o protegidos ou privados.


# --------------------------------------------------------------------------- #
# - > CONTE√öDO do dia - 33.1 - <--- / FIM ---------------------------------- //
# #####################################
# - > AULA ao VIVO - 33.1 ----- <--- / INICIO ------------------------------ //
# --------------------------------------------------------------------------- #

# Foco de hoje
# ...

# --------------------------------------------------------------------------- #
# - > AULA ao VIVO - 33.1 ----- <--- / FIM --------------------------------- //
# #####################################
# - > EXERC√çCIO do dia - 33.1 - <--- / INICIO ------------------------------ //
# --------------------------------------------------------------------------- #

# Agora a pr√°tica

# Exerc√≠cio 1: 

# --------------------------------------------------------------------------- #
# - > EXERC√çCIO do dia - 33.1 - <--- / FIM --------------------------------- //
# ########################################## introducao-a-programacao-orientada-a-objetos
# - Conclu√≠do ... ------------------------------------------------------------ #
