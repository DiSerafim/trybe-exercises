# ########################################## Arquitetura de redes
# --> CONTE√öDO do dia - 34.1 - <--- / INICIO ----------------------------- //
# ########################################## Arquitetura de redes

# Internet
# Redes de computadores
# Pacotes
# Protocolos
# Modelo de Rede

""" ---> OBJETIVO <---
- Entender um pouco mais como a internet funciona;
- Conhecer os conceitos b√°sicos de redes de computadores;
- Entender os modelos de cliente-servidor e P2P ;
- Entender como funciona a estrutura de camadas nas redes;
- Conhecer as camadas que formam o principal modelo de rede;
- Aprender o que s√£o os protocolos e como os utilizamos no nosso dia-a-dia.
"""


# ---> Conte√∫dos <---

"""  --------------------------------------------------------------------------- 
| -> Internet <-                                                               |
---------------------------------------------------------------------------  """
# Veja esse v√≠deo da TecMundo que conta a hist√≥ria da internet!
# https://www.youtube.com/watch?v=pKxWPo73pX0


"""  --------------------------------------------------------------------------- 
| -> Redes de computadores                                                     |
---------------------------------------------------------------------------  """
# - s√£o conjuntos de software e hardware que permitem a comunica√ß√£o entre diversos dispositivos como computadores, celulares e impressoras, sendo capazes de compartilhar e transmitir dados uns com os outros.

""" # Existe uma classifica√ß√£o quanto a escala dessa rede, sendo que uma rede de escala menor pode fazer parte de uma rede de escala maior:

- PAN (Personal Area Network): Chamamos de PAN as redes que abrangem uma pequena √°rea f√≠sica, com dispositivos que se comunicam de forma bem pr√≥xima. Como exemplo, temos a rede que permite que seu fone bluetooth se conecte com seu smartphone ou seu mouse sem fio funcione no seu computador.
- LAN (Local Area Network): Rede local de um escrit√≥rio, casa ou pr√©dio, normalmente abrangendo uma √°rea com algumas salas ou blocos. Interliga computadores, roteadores, smartphones, impressoras, entre outros.
- MAN (Metropolitan Area Network): Interliga diversas redes e dispositivos em uma √°rea metropolitana como, por exemplo, v√°rios locais situados em diversos pontos de uma cidade ou bairro. Outra classifica√ß√£o √© a NAN (Neighborhood Area Network), que se restringe a uma √°rea de uma bairro ou vizinhan√ßa.
- WAN (Wide Area Network): Rede geograficamente distribu√≠da, interligando redes e dispositivos em √¢mbito global (estados, pa√≠ses e continentes). A internet √© um exemplo de WAN üòé

 """

# As redes s√£o compostas tanto de componentes f√≠sicos (hardware) como cabos, roteadores e switches, quanto de softwares que permitem o tr√°fego de informa√ß√µes.


"""  --------------------------------------------------------------------------- 
| -> Pacotes                                                                   |
---------------------------------------------------------------------------  """
# Para trafegar uma informa√ß√£o em uma rede, essa informa√ß√£o √© convertida para bin√°rios e ent√£o dividida em diversos peda√ßos, e esses peda√ßos s√£o os chamados "pacotes" que s√£o enviados pela rede. Os pacotes possuem diversos dados, al√©m da informa√ß√£o em si, como quem est√° enviando aquele pacote, qual o seu destino e indica√ß√µes para que o destinat√°rio saiba se alguma parte da informa√ß√£o se perdeu no caminho e se √© necess√°rio solicitar um reenvio, dentre outras fun√ß√µes.


"""  --------------------------------------------------------------------------- 
 -> Protocolos                                                                 |
---------------------------------------------------------------------------  """
# s√£o conjuntos de regras que controlam como os dados s√£o trocados. Dessa forma √© poss√≠vel que, ao enviar um dado (pacote) atrav√©s da rede seguindo esses padr√µes, tenhamos a garantia de que os demais dispositivos da rede saber√£o l√™-lo.


"""  --------------------------------------------------------------------------- 
 -> Modelo de Rede                                                             |
---------------------------------------------------------------------------  """
# Existem diversos protocolos, cada um respons√°vel por definir as regras para um objetivo espec√≠fico. 

# Por exemplo, temos protocolos que definem como o dado ser√° trafegado, outros para definir como traduzir os dados recebidos no pacote.

# Dividimos ent√£o os protocolos em grupos, agrupando cada tipo no que chamamos de camadas.
# Por exemplo, precisamos de uma camada para identificar quem est√° enviando a informa√ß√£o e pra quem ela se destina, precisamos de outra camada para traduzir os dados a serem trafegados, etc.

""" Modelo ISO/OSI """
# (Open Systems Interconnection ), foi lan√ßado com o objetivo de ser um padr√£o entre os diversos dispositivos de comunica√ß√£o. Esse modelo divide as redes de computadores em 7 camadas:
# 1- Aplica√ß√£o
# 2- Apresenta√ß√£o
# 3- Sess√£o
# 4- Transporte
# 5- Rede
# 6- Enlace
# 7- F√≠sica

"""
1. F√≠sica: Estabelece a comunica√ß√£o entre os dispositivos no sentido f√≠sico. Respons√°vel pelo cabeamento, pelas caracter√≠sticas el√©tricas como tens√£o, √≥pticas (quando se der por meio √≥ptico) ou eletromagn√©ticas em uma rede sem fio. Tudo isso garantindo que ocorra a transmiss√£o dos dados pelos meios f√≠sicos (hardware), sem perder 0 s e 1 s.

2. Enlace: Tamb√©m chamada de "link de dados", essa camada √© respons√°vel pela detec√ß√£o e eventualmente pela corre√ß√£o de erros que tenham ocorrido no n√≠vel f√≠sico. Ela tamb√©m realiza o controle do fluxo da transmiss√£o entre um dispositivo e outro.

3. Rede: Respons√°vel pelo endere√ßamento dos dispositivos na rede, assim como pela rota (caminho) que os pacotes dever√£o percorrer para chegarem da origem at√© destino.

4. Transporte: Respons√°vel pela detec√ß√£o e corre√ß√£o de erros que tenham ocorrido nas camadas anteriores, assim como pela ordena√ß√£o, garantindo que os dados sa√≠dos da origem sejam os mesmos no destino. Al√©m disso, ela define a conex√£o que ser√° usada e como estabelec√™-la, assim como controla o fluxo e congestionamento de dados.

5. Sess√£o: Respons√°vel pela comunica√ß√£o entre dois processos que est√£o em m√°quinas diferentes, controlando o status, definindo quando deve come√ßar, terminar ou reiniciar a comunica√ß√£o entre origem e destino.

6. Apresenta√ß√£o: Respons√°vel pela convers√£o entre os formatos de caracteres para que possam ser utilizados na transmiss√£o, tamb√©m respons√°vel pela compress√£o e criptografia desses dados.

7. Aplica√ß√£o: Essa camada √© respons√°vel pelo controle da sintaxe e da sem√¢ntica da mensagem, traduzindo de fato as informa√ß√µes trafegadas.
"""

""" Modelo Internet - TCP/IP """
# √© um conjunto de protocolos de comunica√ß√£o: 
# TCP ( Transmission Control Protocol - Protocolo de Controle de Transmiss√£o)
# IP ( Internet Protocol - Protocolo de Internet).

# O TCP/IP define 4 camadas mesclando as 7 do modelo OSI:
# 1- Aplica√ß√£o
# 2- Transporte
# 3- Rede
# 4- Interface

"""
"Aplica√ß√£o"
Cont√©m os protocolos respons√°veis por dar significado √†s informa√ß√µes, sendo a primeira camada passada para a mensagem.
Como exemplos de protocolos dessa camada temos:
- SMTP ( Simple Mail Transfer Protocol - Transmiss√£o de e-mails),
- FTP ( File Transfer Protocol - Transfer√™ncia de arquivos),
- HTTP ( Hypertext Transfer Protocol - Comunica√ß√£o WEB).
Tomando como exemplo o HTTP, quando subimos um front-end e temos um servidor capaz de servir p√°ginas web, esse processo √© realizado utilizando HTTP. Ao subirmos o servidor, o mesmo ficar√° aguardando por um pedido, por requisi√ß√µes. Quando acessamos aquele servi√ßo pelo navegador, por exemplo, o navegador est√° fazendo uma chamada HTTP ao servidor, ou seja: o pedido √© feito seguindo os padr√µes desse protocolo, de modo que o servidor saber√° como interpret√°-lo, process√°-lo e devolver a devida resposta.

"Transporte"
√â a camada respons√°vel pela transfer√™ncia de dados entre diferentes m√°quinas (seja um servidor ou um computador pessoal). Os principais protocolos dessa camada s√£o o "TCP" e o "UDP" .
Os protocolos possuem diferentes aplicabilidades. Por exemplo, para criarmos um servidor para servir uma p√°gina web n√£o podemos ter perda de informa√ß√µes, caso contr√°rio a p√°gina n√£o chegar√° por completo a quem pediu. Da mesma forma que, ao construirmos uma API, temos que garantir que os dados enviados, como o conte√∫do de um formul√°rio de cadastro, chegue at√© o servidor, assim como garantir que os dados respondidos em uma consulta feita ao servidor , por exemplo, sejam entregues por inteiro ao cliente que fez essa solicita√ß√£o. Nesses casos o "TCP" √© o protocolo mais adequado.
Por outro lado, ao assistirmos uma live ou jogarmos algum jogo online, alguns dados podem ser perdidos, por exemplo, parte da transmiss√£o do v√≠deo, de maneira que perceberemos apenas uma oscila√ß√£o na transmiss√£o. Nesse caso, o "UDP" √© mais indicado, j√° que com "TCP", caso essa perda de pacote ocorra, ser√° necess√°rio aguardar o reenvio para ent√£o ser dado continuidade no processo. Al√©m disso o "UDP" permitir√° uma maior velocidade na transmiss√£o e tamb√©m que o conte√∫do seja transmitido para diversos clientes ao mesmo tempo, permitindo que diversas pessoas assistam √†quele conte√∫do em tempo real.

"Rede"
O principal protocolo utilizado nessa camada √© o IP - Internet Protocol
Outras op√ß√µes de protocolos dessa camada temos o ICMP, NAT, ARP. Todos eles lidam com o endere√ßamento da comunica√ß√£o.
Imagine que voc√™ vai enviar uma mensagem para algu√©m atrav√©s de uma carta. Voc√™ ent√£o escreve a mensagem em uma folha e a coloca em um envelope. Nesse envelope √© necess√°rio que voc√™ coloque o endere√ßo para o destinat√°rio a qual voc√™ est√° enviando a mensagem, de modo que seja poss√≠vel entreg√°-la. Da mesma maneira voc√™ precisa informar o seu endere√ßo para que o destinat√°rio possa enviar uma mensagem de resposta para voc√™.
A camada de rede do TCP/IP √© utilizada para isso. Ela ir√° identificar o remetente e o destinat√°rio para que o pacote possa ser transmitido na rede. Caso queira conhecer um pouco mais sobre o IPv6 assista, como conte√∫do extra, ao v√≠deo: 'Os endere√ßos IP n√£o s√£o todos iguais do NIC.br'

"DNS"
Estamos falando constantemente de endere√ßos IP: que toda m√°quina possui um para poder se comunicar na rede e ao endere√ßar um pacote n√≥s o utilizamos. Por√©m, a realidade √© que n√£o costumamos ver muitos esses n√∫meros ao utilizar a internet e voc√™ deve estar se perguntando que, se eles s√£o essenciais para se navegar, onde eles ficam?
N√≥s utilizamos um sistema de nomes para identificar pontos da rede, ao inv√©s de usar n√∫meros, j√° que nomes s√£o mais f√°ceis de serem utilizados por pessoas. Por exemplo: imagine que, para acessar o google.com fosse necess√°rio digitar no navegador "8.8.8.8", ou para acessar o site da Trybe fosse necess√°rio digitar "34.193.204.92". 
Dessa forma, de maneira bem resumida, conseguimos atribuir um "nome" a um endere√ßo IP espec√≠fico.

"Interface / Acesso ao Meio
"Por √∫ltimo, mas n√£o menos importante, temos a camada f√≠sica ou de abstra√ß√£o do hardware, tamb√©m chamada de camada de interface ou de acesso ao meio.
A principal fun√ß√£o dessa camada √© realizar a interface do modelo TCP/IP com os diversos modelos de rede, por exemplo o protocolo Ethernet , transmitindo os dados atrav√©s dos meios f√≠sicos, encontrando e transmitindo tudo pelo melhor caminho poss√≠vel. Esta camada lida com os meios de comunica√ß√£o, corresponde ao n√≠vel de hardware, ou meio f√≠sico, que trata dos sinais eletr√¥nicos, conector, pinagem, n√≠veis de tens√£o, dimens√µes f√≠sicas, caracter√≠sticas mec√¢nicas e el√©tricas, etc.

"""


# --------------------------------------------------------------------------- #
# - > CONTE√öDO do dia - 34.1 - <--- / FIM ---------------------------------- //
# #####################################
# - > AULA ao VIVO - 34.1 ----- <--- / INICIO ------------------------------ //
# --------------------------------------------------------------------------- #

# Foco de hoje
# ... Arquitetura de redes

# - Curl
# - wget
# - TCPServer
# - UDPServer

# Execute os comando no Terminal

""" Curl > exibe uma paina a web """
# curl https://app.betrybe.com/course/live-lectures/sd-cohort-10-b

""" wget > possibilita baixar uma pagina da web"""
# wget https://app.betrybe.com/course/live-lectures/sd-cohort-10-b

""" TCPServer """
# ./tcp.py

# Terminal-01
# python3 tcp.py
# Terminal-02
# telnet 127.0.1 8080

""" UDPServer """
# ./udp.py
# Terminal-01

# Terminal-02
# nc -u 127.0.0.1 9090


# --------------------------------------------------------------------------- #
# - > AULA ao VIVO - 34.1 ----- <--- / FIM --------------------------------- //
# #####################################
# - > EXERC√çCIO do dia - 34.1 - <--- / INICIO ------------------------------ //
# --------------------------------------------------------------------------- #

# Agora a pr√°tica

# Exerc√≠cio 1: O primeiro server que iremos utilizar √© o nosso velho amigo HTTP, na camada de aplica√ß√£o. Voc√™ pode tanto criar um quanto utilizar um dos projetos ou exerc√≠cios dos m√≥dulos anteriores. A ideia √© utilizarmos os conhecimentos do conte√∫do e a ferramenta CURL para realizarmos uma chamada HTTP para ele. A ideia aqui √© que o projeto tenha rotas GET e POST, para que seja poss√≠vel enviar requisi√ß√µes para os endpoints e receber respostas, assim como j√° nos acostumamos a receber via browser ou utilizando programas como o Postman.

# Caso tenha dificuldades maiores, voc√™ pode utilizar o Postman para converter uma requisi√ß√£o em cURL, √© s√≥ fazer a requisi√ß√£o nele como voc√™ j√° sabe e depois clicar no bot√£o code (que fica embaixo do save) e escolher CURL.
# Fa√ßa uma chamada GET, utilizando o CURL.
# Fa√ßa uma chamada POST, utilizando o CURL, passando um JSON no body da requisi√ß√£o.
# Fa√ßa uma chamada qualquer, utilizando o cURL, passando um header na requisi√ß√£o.
# R = ./curl-get-e-post.py

# Exerc√≠cio 2 : Ainda utilizando o cURL, vamos explorar mais alguns conceitos do HTTP. Relembre que falamos que o HTTP organiza e d√° significado aos dados encapsulados nessa camada. Por exemplo: ao vermos um 200 tanto n√≥s quanto um client HTTP sabemos que aquela request foi realizada com sucesso. Vamos explorar isso com o cURL.
# Fa√ßa uma chamada GET, utilizando o cURL, para "google.com".
# R = ‚îî‚îÄ# curl www.google.com

# Perceba que foi retornado um 301 . Isso quer dizer que existem diversos redirecionamentos que nos encaminham para o lugar certo. No caso, o caminho certo para a p√°gina do google √© www.google.com . Ao acessarmos pelo navegador, n√£o percebemos isso porqu√™ ele faz o redirecionamento para a p√°gina certa para n√≥s ao encontrar o 301 , por√©m, se voc√™ inspecionar a network voc√™ ir√° identificar esse redirecionamento. Fa√ßa uma nova chamada a "google.com", por√©m agora utilizando o par√¢metro -L ou --location , que serve para "seguir redirecionamentos".
# R = ‚îî‚îÄ# curl -L www.google.com
# R = ‚îî‚îÄ# curl --location www.google.com

# Exerc√≠cio 3 : Agora utilizando o wget, pegue o conte√∫do da p√°gina do site da Trybe, depois abra o arquivo HTML baixado em seu navegador. Fa√ßa o mesmo processo com outras p√°ginas web.
# R = wget https://app.betrybe.com

# Exerc√≠cio 4 : Agora iremos para a camada de transporte. Crie um servidor TCP usando o m√≥dulo socketserver que j√° vem embutido com o Python. Nosso servidor TCP dever√°:
# Responder com um "Ol√°, client", logo quando estabelecer uma conex√£o.
# Imprimir no console todo dado recebido.
# Responder com os dados recebidos (como um eco).
# Utilize a porta 8085.
# Perceba que o servidor sozinho n√£o faz nada. Ele precisa que algu√©m se conecte a ele, ent√£o para test√°-lo voc√™ pode utilizar o comando "telnet localhost 8085" , onde telnet √© a aplica√ß√£o que iremos utilizar, localhost √© o local onde o servidor est√° (no caso, o seu pr√≥prio PC) e 8085 √© a porta em que o servidor est√° escutando conex√µes.
# Dicas:
# a documenta√ß√£o do m√≥dulo traz exemplos de como instanciar seu servidor TCP
# na mesma documenta√ß√£o, temos exemplos de classes para responder as requisi√ß√µes
# os dados na requisi√ß√£o v√™m em bytes -- n√£o strings! bytes podem ser decodificados em string com a codifica√ß√£o correta
# do mesmo jeito, para responder voc√™ pode precisar codificar strings em bytes
# telnet sempre envia ASCII, j√° o netcat envia no encoding do sistema (em Linux, geralmente utf-8, mas confirme com o comando locale )
"""
R = servidor-tcp-com-socketserver.py
terminal-1:
‚îî‚îÄ# python3 servidor-tcp-com-socketserver.py
terminal-2:
‚îî‚îÄ# telnet localhost 8085
"""

# Exerc√≠cio 5 : Utilizando o comando telnet ou o Netcat (nc):
# Conecte no server do exerc√≠cio anterior e envie informa√ß√µes. O server dever√° imprimir as mensagens enviadas no console.
# Pare o servidor e verifique o que aconteceu com a conex√£o que estava aberta com o comando telnet ou nc.
"""
R = servidor-tcp-com-socketserver.py
terminal-1:
‚îî‚îÄ# python3 servidor-tcp-com-socketserver.py
terminal-2:
‚îî‚îÄ# telnet 127.0.0.1 8085
ou
‚îî‚îÄ# nc -t 127.0.0.1 8085                                                                                             1 ‚®Ø
"""

# Exerc√≠cio 6 : Reinicie o servidor TCP e agora fa√ßa uma requisi√ß√£o utilizando o cURL (HTTP). Perceba o que √© exibido no console do server , j√° que n√£o estamos utilizando o HTTP nele. Perceba tamb√©m que o comando cURL n√£o recebe uma resposta HTTP com sentido (um status code 200, por exemplo), de modo que ele n√£o sabe que aquela requisi√ß√£o chegou ao fim.
"""
curl --request POST \
    --data "{ \"foo\": \"bar\" }" \
    --header 'Content-Type: application/json' \
    --header 'Foo-Bar-Header: foo-bar' \
    --data '{ "foo": "bar" }' \
    localhost:8085/foo-bar
"""

# Exerc√≠cio 7 : Agora iremos explorar o outro protocolo de transporte que aprendemos. Crie um servidor UDP usando o mesmo m√≥dulo socketserver . Nosso servidor UDP dever√°:
# Imprimir no console toda mensagem recebida (n√£o esque√ßa de converter tamb√©m para string).
# Responder com os dados recebidos (como um eco).
# Utilize a porta 8084.
# Dicas:
# todas as dicas do exerc√≠cio 4 se aplicam
# telnet n√£o funciona com udp -- use netcat
# R = ./servidor-udp-com-socketserver.py

# Exerc√≠cio 8 : Envie pacotes para o servidor UDP utilizando o Netcat (nc). Em seguida pare o servidor e perceba que como n√£o h√° conex√£o nada √© sentido pelo client .
# R = ‚îî‚îÄ# nc -u 127.0.1 8084

# Exerc√≠cio 9 : Fa√ßa uma chamada ao server utilizando o cURL . Lembre que, al√©m do HTTP, o comando utiliza o protocolo TCP e n√£o o UDP. Repare o que acontece.
# R = ‚îî‚îÄ# curl localhost:8084

""" B√¥nus """

# Exerc√≠cio 10 : Identifique o IP interno e externo da sua m√°quina.
# R = ‚îî‚îÄ# curl ifconfig.me

# Exerc√≠cio 11 : Identifique as interfaces de redes utilizadas por sua m√°quina e identifique qual est√° em uso agora.
# R = ‚îî‚îÄ# curl ifconfig.me

# --------------------------------------------------------------------------- #
# - > EXERC√çCIO do dia - 34.1 - <--- / FIM --------------------------------- //
# ########################################## Arquitetura de redes
# - Conclu√≠do \o/ ------------------------------------------------------------ #
