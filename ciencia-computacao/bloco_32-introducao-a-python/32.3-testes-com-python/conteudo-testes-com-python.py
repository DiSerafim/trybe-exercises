# ########################################## hh
# --> CONTE√öDO do dia - 32.3 - <--- / INICIO ----------------------------- //
# ########################################## Testes com Python

# ---> FOCO <---
...
# Testes automatizados
# Testando falhas
# Um pouco de contexto
# Dubl√™s de teste

# ---> OBJETIVO <---
...
# Escrever testes automatizados utilizando a linguagem Python ;
# Verificar a ocorr√™ncia de erros esperados utilizando testes automatizados;
# Criar contextos para execu√ß√£o de testes automatizados;
# Modificar componentes do software para evitar a utiliza√ß√£o de recursos _
# externos.

# ---> CONTE√öDO <---
...
# -> Testes automatizados
...

# - "assert" caso a express√£o recebida seja verdadeira, nada acontece, por√©m
# caso seja falsa, uma exce√ß√£o do tipo AssertionError √© lan√ßada.

# ./dividir.py
# ./test_dividir.py

...
# ./e_impar.py
# ./test_e_impar.py

...
# ./e_par.py
# ./test_e_par.py


...
# -> Testando falhas
...
# - Podemos escrever testes que verificam que um erro deve ocorrer a partir
# de uma determinada entrada.

# "raises" , verifica se a exce√ß√£o ocorreu. Se n√£o, lan√ßa um AssertionError

# ./testando_falhas.py
# ./test_testando_falhas.py


...
# -> Um pouco de contexto
...

# - Cada test pode ter seu pr√≥prio contexto ou compartilh√°-lo com outros testes
# ./test_contexto.py


...
# -> Dubl√™s de teste
...
# - substituir componentes para que retornem um determinado valor simulado ou
# substituir os componentes por objetos falsos que registram as informa√ß√µes
# - evitando assim a depend√™ncia externa a um arquivo real.


# - fakes: objetos que possuem implementa√ß√µes funcionais, por√©m simplificadas;
# - mocks: pr√© programados p/ verificarem as chamadas das fun√ß√µes que receberem
# - stubs: proveem respostas predefinidas;
# - spies: como stubs, mas tamb√©m armazenam informa√ß√µes de como foram chamados.

...
# material complementar sobre dubl√™s de testes
# https://martinfowler.com/bliki/TestDouble.html

...
# -No 1¬∞ cen√°rio nossa depend√™ncia externa(o arquivo) √© recebido como par√¢metro
# ./duble_pokemon.py
# ./test_duble_pokemon.py

...
# -No 2¬∞ a fun√ß√£o espera o nome do arquivo, a abertura acontece dentro da fun√ß√£
# ./duble_segundo_caso.py
# ./test_duble_segundo_caso.py


# --------------------------------------------------------------------------- #
# - > CONTE√öDO do dia - 32.3 - <--- / FIM ---------------------------------- //
# #####################################
# - > AULA ao VIVO - 32.3 ----- <--- / INICIO ------------------------------ //
# --------------------------------------------------------------------------- #

# Foco de hoje
# Testes com Python

...
# Benef√≠cions Dos Testes!
# - C√≥digo test√°vel
# - Feedback r√°pido
# - Refatora√ß√£o como parte do processo
# - Somente o necess√°rio
# - Design incremental
# - Documenta√ß√£o em tempo real
# - Melhor qualidade de c√≥digo
# - Menos bugs
# - Somente o neces√°rio
# - DRY (Don't repeat yourself)

...
# Mitos do TDD
# - Dif√≠cil? Complicado? Demora?
# - Testar sempre antes
# - C√≥digos sem erros ou bugs
# - Tendencioso testar o pr√≥prio c√≥digo

...
# readme.md

...
# Gerar um relat√≥rio
# ./scenario1.py
# /tests/test_scenario1_1.py
# /tests/test_scenario1_2.py
# /tests/test_scenario1_3.py

...
# Retorna os produtos de um json
# ./scenario2.py
# /tests/test_scenario2.py

...
# ./scenario3.py
# /tests/test_scenario3.py


# --------------------------------------------------------------------------- #
# - > AULA ao VIVO - 32.3 ----- <--- / FIM --------------------------------- //
# #####################################
# - > EXERC√çCIO do dia - 32.3 - <--- / INICIO ------------------------------ //
# --------------------------------------------------------------------------- #

# Agora a pr√°tica

...
# Exerc√≠cio 1: Escreva um programa que retorne uma lista com os valores
# num√©ricos de 1 a N, mas com as seguintes exce√ß√µes:
# N¬∞ divis√≠veis por 3 deve aparecer como 'Fizz' ao inv√©s do n√∫mero;
# N¬∞ divis√≠veis por 5 devem aparecer como 'Buzz' ao inv√©s do n√∫mero;
# N¬∞ divis√≠veis por 3 e 5 devem aparecer como 'FizzBuzz' ao inv√©s do n√∫mero';
# Ex: 3 -> [1, 2, "Fizz"]

...
# Exerc√≠cio 2 Em alguns lugares √© comum lembrar um n√∫mero do telefone
# associando seus d√≠gitos a letras. Dessa maneira a express√£o MY LOVE significa
# 69 5683. Claro que existem alguns problemas, uma vez que alguns n√∫meros de
# telefone n√£o formam uma palavra ou uma frase e os d√≠gitos 1 e 0 n√£o est√£o
# associados a nenhuma letra.
# Sua tarefa √© ler uma express√£o e encontrar o n√∫mero de telefone
# correspondente baseado na tabela abaixo. Uma express√£o √© composta por letras
# mai√∫sculas (A-Z), hifens (-) e os n√∫meros 1 e 0.
# Letras  ->  N√∫mero
# ABC     ->  2
# DEF     ->  3
# GHI     ->  4
# JKL     ->  5
# MNO     ->  6
# PQRS    ->  7
# TUV     ->  8
# WXYZ    ->  9
# Exemplo de entrada:
# 1-HOME-SWEET-HOME
# MY-MISERABLE-JOB
# Sa√≠das correspondentes:
# 1-4663-79338-4663
# 69-647372253-562
# Curiosidade : A frase "The quick brown fox jumps over the lazy dog" √© um
# pantograma (frase com sentido em que s√£o usadas todas as letras do alfabeto
# de determinada l√≠ngua) da l√≠ngua inglesa.
# Verifique casos de entrada maior que 30 caractere, vazia, caracteres inv√°lido

...
# Exerc√≠cio 3 Fa√ßa uma fun√ß√£o que valide um e-mail nos seguintes crit√©rios
# abaixo, lan√ßando uma exce√ß√£o quando o valor for inv√°lido. Endere√ßos de email
# v√°lidos devem seguir as seguintes regras:
# Devem seguir o formato nomeusuario@nomewebsite.extensao;
# O nome de usu√°rio deve conter somente letras, d√≠gitos, tra√ßos e underscores;
# O nome de usu√°rio deve iniciar com letra;
# O nome do website deve conter somente letras e d√≠gitos;
# O tamanho m√°ximo da extens√£o √© tr√™s.
# ü¶ú As fun√ß√µes isalpha e isdigit podem ser utilizadas para verificar se uma
# letra ou palavra s√£o compostas de somente caracteres ou d√≠gitos.
# Exemplo: "1".isaplha() -> False , "a".isalpha() -> True

...
# Exerc√≠cio 4 Baseado no exerc√≠cio anterior, escreva uma fun√ß√£o que, dado uma
# lista de emails, deve retornar somente os emails v√°lidos. Caso uma exce√ß√£o
# ocorra, apenas a escreva na tela.
# Exemplo: ["nome@dominio.com", "errad#@dominio.com", "outro@dominio.com"] ->
# ["nome@dominio.com", "outro@dominio.com"]


...
# Recursos adicionais (opcional)
...

# # - Guia do mochileiro para Python - tests
# https://python-guide-pt-br.readthedocs.io/pt_BR/latest/writing/tests.html
# # - Live de Python - Testes com Python
# https://www.youtube.com/watch?v=5hL9T3jintE
# # - Unit testing in Visual Studio
# https://docs.microsoft.com/pt-br/visualstudio/python/unit-testing-python-in-visual-studio?view=vs-2019
# # - Dubl√™s de teste
# https://cassiobotaro.dev/post/dubles-de-teste/


# --------------------------------------------------------------------------- #
# - > EXERC√çCIO do dia - 32.3 - <--- / FIM --------------------------------- //
# ########################################## Testes com Python
# - Conclu√≠do \o/------------------------------------------------------------ #
