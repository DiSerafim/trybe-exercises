# ########################################## Complexidade de algoritmos
# --> CONTE√öDO do dia - 35.1 - <--- / INICIO ----------------------------- //
# ########################################## Complexidade de algoritmos

# Complexidade de tempo e de espa√ßo
# Complexidade quadr√°tica
# Comparando complexidades
# Complexidade logar√≠tmica
# Complexidade exponencial e fatorial
# Analisando algoritmos com v√°rias estruturas de repeti√ß√£o
# Melhor caso, pior caso e caso m√©dio
# Em suma

""" ---> OBJETIVO <---
- Descrever a capacidade de analisar o desempenho de um algoritmo como importante para processos seletivos de Big Techs, como Google, Amazon, Facebook, etc

- Definir Ordem de Complexidade , ou Complexidade Assint√≥tica , de como o quanto que o tempo de execu√ß√£o do algoritmo varia na medida em que a entrada cresce

- Descrever a Ordem de Complexidade como definida com o uso de fun√ß√µes matem√°ticas que representam a propor√ß√£o com que a grandeza mensurada cresce na medida em que o dado entrado cresce

- Definir como O(1) a nota√ß√£o que representa um algoritmo de complexidade constante, ou seja, que n√£o aumenta na medida em que o tamanho da entrada aumenta

- Definir como O(n) a nota√ß√£o que representa um algoritmo de complexidade linear, ou seja, uma que reduz pela metade o tamanho do input a cada itera√ß√£o

- Definir como O(log n) a nota√ß√£o que representa um algoritmo de complexidade logaritmica

- Definir como O(n^2) a nota√ß√£o que representa um algoritmo de complexidade quadr√°tica

- Definir como O(n^3) a nota√ß√£o que representa um algoritmo de complexidade c√∫bica

- Definir Complexidade de Tempo como a m√©trica associada ao tempo que um algoritmo vai demorar para executar

- Definir Complexidade de Espa√ßo como a m√©trica associada ao espa√ßo em mem√≥ria que um algoritmo vai ocupar

- Definir como O(2^n) a nota√ß√£o que representa um algoritmo de complexidade exponencial

- Definir como O(n!) a nota√ß√£o que representa um algoritmo de complexidade fatorial

- Definir o Problema do Caixeiro Viajante - Dada uma lista de cidade e a dist√¢ncia entre cada par de cidades, qual √© a rota mais curta poss√≠vel que visita todas as cidades exatamente uma vez e volta para a cidade de origem?

- Definir a Categoria de Problemas NP-Completo como o conjunto de problemas que n√£o tem solu√ß√£o conhecida em tempo polinomial, ou seja, que s√£o fatoriais ou exponenciais

- Combinar fun√ß√µes matem√°ticas para analisar complexidade de algoritmos - por exemplo, O( 3 log n), O (n log n), O(n^3 + n^2), que se simplifica como O(n^3)

- Definir o Melhor caso de uma Ordem de Complexidade como o cen√°rio com a entrada cujo processamento √© feito, proporcionalmente, na menor quantidade de passos poss√≠vel

- Definir o Pior caso de uma Ordem de Complexidade como o cen√°rio com a entrada cujo processamento √© feito, proporcionalmente, na maior quantidade de passos poss√≠vel

- Definir o Caso m√©dio de uma Ordem de Complexidade como o cen√°rio de n√∫mero de execu√ß√£o de passos que ir√° ocorrer para a maior parte de entradas poss√≠vel
"""


# ---> Conte√∫dos <---

"""  --------------------------------------------------------------------------- 
| -> Complexidade de tempo e de espa√ßo <-                                      |
---------------------------------------------------------------------------  """
# - Quanto tempo um algoritmo demora para executar? üòÅ
# - Quanto maior o dado passado por par√¢metro, mais o algoritmo demorar√° para executar.

def sum_array(numbers):
    sum = 0
    for number in numbers:
        sum += number
    return sum

# Para qualquer tamanho de entrada ele ocupa a mesma quantidade de espa√ßo para executar.
# sua complexidade de espa√ßo √© constante
# A nota√ß√£o para esta complexidade √© O(1)
print(sum_array([8, 2, 7, 6, 9]))  # 32

# Suponha que, para o array abaixo, o tempo de execu√ß√£o seja `n`
sum_array("array_com_dez_mil_numeros")

# Nesse caso, aqui o tempo de execu√ß√£o vai ser `10 * n`, ou `10n`, j√° que o array √© dez vezes maior que o anterior!
sum_array("array_com_cem_mil_numeros")

# J√° esse √© dez mil vezes maior que o primeiro, ent√£o esse aqui executa em `100n`
sum_array("array_com_um_milh√£o_de_numeros")

""" Ordem de complexidade """
# - √â o quanto que o tempo de execu√ß√£o do algoritmo varia na medida em que a entrada cresce!

sum_array("array_com_dez_mil_numeros")
# O tempo de execu√ß√£o deste algoritmo foi 0.0004s

sum_array("array_com_cem_mil_numeros")
# Para uma execu√ß√£o com dez vezes mais n√∫meros, o tempo aumentou em dez vezes: 0.004s

sum_array("array_com_um_milh√£o_de_numeros")
# Multiplicando o tamanho da entrada por dez novamente, temos um tempo dez vezes maior: 0.05s

# - A fun√ß√£o matem√°tica que representa uma rela√ß√£o linear √© "f(n) = n"
# Na nota√ß√£o de Ordem de Complexidade, dizemos que esse algoritmo √© O(n)

# ./tempo-e-espaco.py

""" Exerc√≠cios de Fixa√ß√£o """
# ./fixacao-1.py


"""  --------------------------------------------------------------------------- 
| -> Complexidade quadr√°tica                                                   |
---------------------------------------------------------------------------  """

# Os arrays tem sempre o mesmo tamanho
def multiply_arrays(array1, array2):
    result = []
    for number1 in array1:
        for number2 in array2:
            result.append(number1 + number2)

    print(result)
    return result

print(multiply_arrays([2, 9]))

# - Seus tempos de execu√ß√£o para um par de arrays de 2000 e 4000 elementos s√£o:
sum_array("array_com_dois_mil_numeros")
# O tempo de execu√ß√£o deste algoritmo foi 0.45s

sum_array("array_com_quatro_mil_numeros")
# J√° esse teve tempo de execu√ß√£o de 1.8s, cerca de quatro vezes maior.

# - Temos dois arrays do mesmo tamanho, que vamos chamar de n . Repare que temos dois loops aninhados um dentro do outro. Isso significa que, para cada n√∫mero de array1 , todo o array2 ser√° percorrido!

# ./complexidade-quadratica.py

""" Exerc√≠cios de Fixa√ß√£o """
# ./fixacao-2.py
# ./fixacao-3.py


"""  --------------------------------------------------------------------------- 
| -> Comparando complexidades                                                  |
---------------------------------------------------------------------------  """

"""  --------------------------------------------------------------------------- 
 -> Complexidade logar√≠tmica                                                   |
---------------------------------------------------------------------------  """

"""  --------------------------------------------------------------------------- 
 -> Complexidade exponencial e fatorial                                        |
---------------------------------------------------------------------------  """

"""  --------------------------------------------------------------------------- 
| -> Analisando algoritmos com v√°rias estruturas de repeti√ß√£o                  |
---------------------------------------------------------------------------  """

"""  --------------------------------------------------------------------------- 
| -> Melhor caso, pior caso e caso m√©dio                                       |
---------------------------------------------------------------------------  """

"""  --------------------------------------------------------------------------- 
 -> Em suma                                                                    |
---------------------------------------------------------------------------  """





# --------------------------------------------------------------------------- #
# - > CONTE√öDO do dia - 35.1 - <--- / FIM ---------------------------------- //
# #####################################
# - > AULA ao VIVO - 35.1 ----- <--- / INICIO ------------------------------ //
# --------------------------------------------------------------------------- #

# Foco de hoje
# ... Complexidade de algoritmos


# --------------------------------------------------------------------------- #
# - > AULA ao VIVO - 35.1 ----- <--- / FIM --------------------------------- //
# #####################################
# - > EXERC√çCIO do dia - 35.1 - <--- / INICIO ------------------------------ //
# --------------------------------------------------------------------------- #

# Agora a pr√°tica

# Exerc√≠cio 1: 

# --------------------------------------------------------------------------- #
# - > EXERC√çCIO do dia - 35.1 - <--- / FIM --------------------------------- //
# ########################################## Complexidade de algoritmos
# - Conclu√≠do ... ------------------------------------------------------------ #
