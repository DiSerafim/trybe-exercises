# ########################################## Complexidade de algoritmos
# --> CONTE√öDO do dia - 35.1 - <--- / INICIO ----------------------------- //
# ########################################## Complexidade de algoritmos

# Complexidade de tempo e de espa√ßo
# Complexidade quadr√°tica
# Comparando complexidades
# Complexidade logar√≠tmica
# Complexidade exponencial e fatorial
# Analisando algoritmos com v√°rias estruturas de repeti√ß√£o
# Melhor caso, pior caso e caso m√©dio
# Em suma

""" ---> OBJETIVO <---
- Descrever a capacidade de analisar o desempenho de um algoritmo como importante para processos seletivos de Big Techs, como Google, Amazon, Facebook, etc

- Definir Ordem de Complexidade , ou Complexidade Assint√≥tica , de como o quanto que o tempo de execu√ß√£o do algoritmo varia na medida em que a entrada cresce

- Descrever a Ordem de Complexidade como definida com o uso de fun√ß√µes matem√°ticas que representam a propor√ß√£o com que a grandeza mensurada cresce na medida em que o dado entrado cresce

- Definir como O(1) a nota√ß√£o que representa um algoritmo de complexidade constante, ou seja, que n√£o aumenta na medida em que o tamanho da entrada aumenta

- Definir como O(n) a nota√ß√£o que representa um algoritmo de complexidade linear, ou seja, uma que reduz pela metade o tamanho do input a cada itera√ß√£o

- Definir como O(log n) a nota√ß√£o que representa um algoritmo de complexidade logaritmica

- Definir como O(n^2) a nota√ß√£o que representa um algoritmo de complexidade quadr√°tica

- Definir como O(n^3) a nota√ß√£o que representa um algoritmo de complexidade c√∫bica

- Definir Complexidade de Tempo como a m√©trica associada ao tempo que um algoritmo vai demorar para executar

- Definir Complexidade de Espa√ßo como a m√©trica associada ao espa√ßo em mem√≥ria que um algoritmo vai ocupar

- Definir como O(2^n) a nota√ß√£o que representa um algoritmo de complexidade exponencial

- Definir como O(n!) a nota√ß√£o que representa um algoritmo de complexidade fatorial

- Definir o Problema do Caixeiro Viajante - Dada uma lista de cidade e a dist√¢ncia entre cada par de cidades, qual √© a rota mais curta poss√≠vel que visita todas as cidades exatamente uma vez e volta para a cidade de origem?

- Definir a Categoria de Problemas NP-Completo como o conjunto de problemas que n√£o tem solu√ß√£o conhecida em tempo polinomial, ou seja, que s√£o fatoriais ou exponenciais

- Combinar fun√ß√µes matem√°ticas para analisar complexidade de algoritmos - por exemplo, O( 3 log n), O (n log n), O(n^3 + n^2), que se simplifica como O(n^3)

- Definir o Melhor caso de uma Ordem de Complexidade como o cen√°rio com a entrada cujo processamento √© feito, proporcionalmente, na menor quantidade de passos poss√≠vel

- Definir o Pior caso de uma Ordem de Complexidade como o cen√°rio com a entrada cujo processamento √© feito, proporcionalmente, na maior quantidade de passos poss√≠vel

- Definir o Caso m√©dio de uma Ordem de Complexidade como o cen√°rio de n√∫mero de execu√ß√£o de passos que ir√° ocorrer para a maior parte de entradas poss√≠vel
"""


# ---> Conte√∫dos <---

"""  --------------------------------------------------------------------------- 
| -> Complexidade de tempo e de espa√ßo <-                                      |
---------------------------------------------------------------------------  """
# - Quanto tempo um algoritmo demora para executar? üòÅ
# - Quanto maior o dado passado por par√¢metro, mais o algoritmo demorar√° para executar.

from numpy import number


def sum_array(numbers):
    sum = 0
    for number in numbers:
        sum += number
    return sum

# Para qualquer tamanho de entrada ele ocupa a mesma quantidade de espa√ßo para executar.
# sua complexidade de espa√ßo √© constante
# A nota√ß√£o para esta complexidade √© O(1)
print(sum_array([8, 2, 7, 6, 9]))  # 32

# Suponha que, para o array abaixo, o tempo de execu√ß√£o seja `n`
sum_array("array_com_dez_mil_numeros")

# Nesse caso, aqui o tempo de execu√ß√£o vai ser `10 * n`, ou `10n`, j√° que o array √© dez vezes maior que o anterior!
sum_array("array_com_cem_mil_numeros")

# J√° esse √© dez mil vezes maior que o primeiro, ent√£o esse aqui executa em `100n`
sum_array("array_com_um_milh√£o_de_numeros")

""" Ordem de complexidade """
# - √â o quanto que o tempo de execu√ß√£o do algoritmo varia na medida em que a entrada cresce!

sum_array("array_com_dez_mil_numeros")
# O tempo de execu√ß√£o deste algoritmo foi 0.0004s

sum_array("array_com_cem_mil_numeros")
# Para uma execu√ß√£o com dez vezes mais n√∫meros, o tempo aumentou em dez vezes: 0.004s

sum_array("array_com_um_milh√£o_de_numeros")
# Multiplicando o tamanho da entrada por dez novamente, temos um tempo dez vezes maior: 0.05s

# - A fun√ß√£o matem√°tica que representa uma rela√ß√£o linear √© "f(n) = n"
# Na nota√ß√£o de Ordem de Complexidade, dizemos que esse algoritmo √© O(n)

# ./tempo-e-espaco.py

""" Exerc√≠cios de Fixa√ß√£o """
# ./fixacao-1_0(n).py


"""  --------------------------------------------------------------------------- 
| -> Complexidade quadr√°tica                                                   |
---------------------------------------------------------------------------  """

# Os arrays tem sempre o mesmo tamanho
def multiply_arrays(array1, array2):
    result = []
    for number1 in array1:
        for number2 in array2:
            result.append(number1 + number2)

    print(result)
    return result

print(multiply_arrays([2, 9]))

# - Seus tempos de execu√ß√£o para um par de arrays de 2000 e 4000 elementos s√£o:
sum_array("array_com_dois_mil_numeros")
# O tempo de execu√ß√£o deste algoritmo foi 0.45s

sum_array("array_com_quatro_mil_numeros")
# J√° esse teve tempo de execu√ß√£o de 1.8s, cerca de quatro vezes maior.

# - Temos dois arrays do mesmo tamanho, que vamos chamar de n . Repare que temos dois loops aninhados um dentro do outro. Isso significa que, para cada n√∫mero de array1 , todo o array2 ser√° percorrido!
""" ./complexidade-quadratica.py """

""" Exerc√≠cios de Fixa√ß√£o """
# ./fixacao-2_n¬≤.py
# ./fixacao-3_0(n¬≥).py


"""  --------------------------------------------------------------------------- 
| -> Comparando complexidades                                                  |
---------------------------------------------------------------------------  """

""" A Ordem de Complexidade """
# - diz o quanto o tempo de execu√ß√£o(ou espa√ßo de mem√≥ria ocupado) de um algoritmo cresce, na medida em que aumentamos o tamanho da sua entrada!

""" O(1) """
# - executa no mesmo tempo independente do tamanho da entrada.
# Como exemplo, lembre-se do acesso a um elemento do array, Bloco"34.3".
# Esse acesso √© O(1), pois leva o mesmo tempo, independente do tamanho do array;

""" O(n) """
# - significa que o algoritmo √© linear: se aumentamos a entrada em 2 vezes, aumentamos o tempo de execu√ß√£o em 2 vezes;

""" O(n¬≤) """
# - significa que o algoritmo √© quadr√°tico: se aumentamos a entrada em 2 vezes, aumentamos o tempo de execu√ß√£o em 4 (2¬≤) vezes;

""" O(n¬≥) """
# - significa que o algoritmo √© c√∫bico: se aumentamos a entrada em 2 vezes, aumentamos o tempo de execu√ß√£o em 8(2¬≥) vezes.

# Para se ter uma no√ß√£o: para um algoritmo linear, com:
""" n = 1000 temos mil opera√ß√µes """
# Quando o algoritmo √©:
""" O(n¬≤) um n = 1000 gera um milh√£o de opera√ß√µes. """
# Essa mesma quantidade (um milh√£o) para:
""" O(n¬≥), se atinge com n = 100. """
# Alguns algoritmos podem, rapidinho, ficar invi√°veis de se executar?


"""  --------------------------------------------------------------------------- 
 -> Complexidade logar√≠tmica                                                   |
---------------------------------------------------------------------------  """
# - Dado pela nota√ß√£o O(log n), um algoritmo logar√≠tmico geralmente reduz pela metade o tamanho do input a cada itera√ß√£o.

# O tempo de execu√ß√£o de um algoritmo √© dito logar√≠tmico porque log‚ÇÇn(l√™-se: "log de n na base 2") nos d√° o n√∫mero de itera√ß√µes que uma entrada de tamanho n ter√° no algoritmo.

""" complexidade-logaritimico.py """
# Dado um array de tamanho n ordenado em ordem crescente, encontre um n√∫mero passado na entrada . √â como procurar por um nome numa lista telef√¥nica!

""" Exerc√≠cios de Fixa√ß√£o """
# ./fixacao-4_0(n log n).py


"""  --------------------------------------------------------------------------- 
 -> Complexidade exponencial e fatorial                                        |
---------------------------------------------------------------------------  """
# - caracterizam algoritmos que, para aumentos pequenos no tamanho da entrada, aumentam enormemente o seu tempo de execu√ß√£o.
"""
Exponencial: 2‚Åø ;
Fatorial: n! .
"""


""" Exponencial: 2‚Åø """
# se n possui vinte elementos, o algoritmo faz um milh√£o de opera√ß√µes. Para o caso fatorial, os mesmos vinte elementos rendem 24 quatrilh√µes de opera√ß√µes (O n√∫mero exato √©: 2432902008176640000 opera√ß√µes üò®).

""" Fatorial: n! """
# for√ßa bruta. Ou seja: testa todas as possibilidades.

# - Belo Horizonte > S√£o Paulo > Florian√≥polis
# - Belo Horizonte > Florian√≥polis > S√£o Paulo
# - Florian√≥polis > Belo Horizonte > S√£o Paulo
# - Florian√≥polis > S√£o Paulo > Belo Horizonte
# - S√£o Paulo > Belo Horizonte > Florian√≥polis
# - S√£o Paulo > Florian√≥polis > Belo Horizonte

# O n√∫mero de rotas para 3 cidades √© 3! == 3 * 2 * 1 = 6

# o Brasil tem 5570 munic√≠pios. Isso daria 5570 * 5569 * 5568 * ... . Quantos milhares de anos um computador precisaria para rodar esse algoritmo nesse caso? üòÑ

# Algoritmos que n√£o tem solu√ß√£o conhecida em tempo "polinomial", que s√£o fatoriais ou exponenciais, resolv√≠veis somente com "for√ßa bruta", pertencem a uma categoria de problemas na computa√ß√£o chamada "problemas NP Completos".


"""  --------------------------------------------------------------------------- 
| -> Analisando algoritmos com v√°rias estruturas de repeti√ß√£o                  |
---------------------------------------------------------------------------  """

# Esse algoritmo tem tr√™s estruturas de repeti√ß√£o evidentes:
# uma linear
# uma quadr√°tica
# uma c√∫bica.
# Qual √© a ordem de complexidade dele?!
""" ./algoritmos-com-estruturas-de-repeticao.py """
# a rigor ela seria "O(n + n¬≤ + n¬≥)"

# Se os loops est√£o aninhados voc√™ os multiplica, e se est√£o paralelos voc√™ os soma.

# Um algoritmo de busca bin√°ria que roda tr√™s vezes = O(3 * log n) ;

# Um algoritmo que roda uma busca bin√°ria num array de tamanho n para cada elemento de um array de tamanho m = O(m * log n) .

# geralmente simplificam-se essas nota√ß√µes.
# ordens de complexidade diferentes, para entradas grandes, tem valores absurdamente diferentes.

# Imagine escrever O(n! + log(n))
# para uma entrada de tamanho 8 esse n√∫mero seria "O(40320 + 3)"
# o componente fatorial da equa√ß√£o, n! = 40320 , domina completamente a ordem de complexidade.
# dizemos que a complexidade menor √© "desprez√≠vel" , ent√£o a omitimos.
# para valores grandes, dizer a maior ordem de complexidade do conjunto j√° basta para uma boa an√°lise.


"""  --------------------------------------------------------------------------- 
| -> Melhor caso, pior caso e caso m√©dio                                       |
---------------------------------------------------------------------------  """
# - "A depender da minha entrada, o meu algoritmo pode executar em O(1) ou O(n) ".

# Ex:
""" ./busca-linear.py """

# Dizemos que, para entradas muito grandes, esse algoritmo √© O(n)
# caso tenhamos sorte e o n√∫mero que procuramos seja o primeiro do array, mesmo para uma entrada infinita, nossa complexidade ser√° "O(1)" 
# Esse √© o melhor caso
# o pior caso √© o n√∫mero ser o √∫ltimo elemento do array, ou seja "O(n)".
# E o caso m√©dio, seria algo como "O(n * 1/2)"
# ou seja, o n√∫mero que procuramos est√° no meio da lista

# para entradas muito grandes, aprendemos a desprezar os n√∫meros menos relevantes da soma, ent√£o podemos simplificar e dizer que o caso m√©dio √© O(n) tamb√©m.


"""  --------------------------------------------------------------------------- 
 -> Em suma                                                                    |
---------------------------------------------------------------------------  """
# - ordens de complexidade , uma forma de se analisar um algoritmo de qualquer linguagem e feito em qualquer paradigma.
"""
Constantes: O(1),
Logar√≠tmicos: O(log n),
Linear: O(n),
Quadr√°ticos: O(n¬≤),
C√∫bicos: O(n¬≥),
Exponencial: O(2‚Åø),
Fatorial: O(n!),
"""

# 1- a depender do algoritmo, essas an√°lises podem ser combinadas, como por exemplo num algoritmo O(n log n)
# 2- problemas que n√£o tem solu√ß√£o conhecida em tempo "polinomial", sendo apenas "exponenciais" ou "fatoriais", em algoritmos de for√ßa bruta, s√£o chamados "NP Completo"
# 3- algoritmos com v√°rias estruturas de repeti√ß√£o diferentes, devemos sempre considerar a maior ordem de complexidade poss√≠vel e desprezar as demais na nossa nota√ß√£o.
# 4- algoritmos podem ter diferentes ordens de complexidade para seu melhor caso, pior caso e caso m√©dio.


# --------------------------------------------------------------------------- #
# - > CONTE√öDO do dia - 35.1 - <--- / FIM ---------------------------------- //
# #####################################
# - > AULA ao VIVO - 35.1 ----- <--- / INICIO ------------------------------ //
# --------------------------------------------------------------------------- #

# Foco de hoje
# ... Complexidade de algoritmos

# 1. Problema - Elemento aparece mais de 25% em um array ordenado.
# Dado uma cole√ß√£o de n√∫meros inteiros 'ordenados' em ordem crescente, 
# tem exatamente um inteiro que corre mais de 25% das vezes.
# analize a ordem de complexidade de tempo e espa√ßo
""" ./problema-1-repetido.py """

# 2 Problema - Procurando a menor letra, maior que o alvo
# Dado uma lista "ordenada" de letras do alfabeto, contendo somente letras min√∫sculas,
# e dado uma letra como alvo, procure o menor elemento na lista que √© maior que o alvo.
""" ./problema-2-percorre-lista.py """




# --------------------------------------------------------------------------- #
# - > AULA ao VIVO - 35.1 ----- <--- / FIM --------------------------------- //
# #####################################
# - > EXERC√çCIO do dia - 35.1 - <--- / INICIO ------------------------------ //
# --------------------------------------------------------------------------- #

# Agora a pr√°tica

""" Exerc√≠cio 1 """
# Dado um array de n√∫meros de tamanho n, escreva um algoritmo que retorna true se h√° no array um n√∫mero duplicado e false caso contr√°rio. Analise a solu√ß√£o abaixo e diga qual √© a ordem de complexidade desse algoritmo para o melhor caso, pior caso e caso m√©dio.
# def contains_duplicate(numbers):
#     numbers.sort()
#     previous_number = 'not a number';
#     for number in numbers:
#         if(previous_number == number): return True
#         previous_number = number
#     return False
""" R = ./ex1-complexidade.py """

""" Exerc√≠cio 2 """
# Suponha que se est√° escrevendo uma fun√ß√£o para um jogo de batalha naval. Dado um array bidimensional com n linhas e m colunas, e um par de coordenadas x para linhas e y para colunas, o algoritmo verifica se h√° um navio na coordenada alvo. Por exemplo:
# entrada = [ 0 0 0 0 1
#             0 0 0 0 1
#             1 1 1 1 1
#             0 0 0 1 0 ]
# resultado para (0, 4) = True
# resultado para (1, 1) = False
# Qual seria a ordem de complexidade da solu√ß√£o para este problema? E a complexidade de espa√ßo?
""" R = ./ex2-array-bidimensional.py """

""" Exerc√≠cio 3 """
# O c√≥digo abaixo est√° em JavaScript. Calcule sua ordem de complexidade para um array de tamanho n.
# const numbers = [0,1,2,3,4,5,6,7,8,9]
# numbers.map(n => n*n)
""" R = ./ex3-complex-0(n).js """

""" Exerc√≠cio 4 """
# O c√≥digo abaixo est√° em JavaScript. Calcule sua ordem de complexidade para um array de tamanho n.
# const numbers = [0,1,2,3,4,5,6,7,8,9]
# numbers.map(n => n*n)
#        .filter(n => n%2 === 0)
#        .reduce((acc, n) => acc + n)
""" R = ./ex4-ordem-de-complexidade.js """

""" Exerc√≠cio 5 """
# Utilize o m√≥dulo random da linguagem Python para gerar um array com 100 n√∫meros.
# Cada um desses n√∫meros deve ser a m√©dia de dez n√∫meros gerados aleat√≥riamente.
# Qual √© a ordem de complexidade de tempo e de espa√ßo deste programa?
""" R = ./ex5-random-complex.py """

""" Exerc√≠cio 6 """
# Dado um array de doces candies e um valor inteiro extra_candies, onde o candies[i] representa o n√∫mero de doces que a en√©sima crian√ßa possui.]
# Para cada crian√ßa, verifique se h√° uma maneira de distribuir doces extras entre as crian√ßas de forma que ela possa ter o maior n√∫mero de doces entre elas.
# Observe que v√°rias crian√ßas podem ter o maior n√∫mero de doces.
# Analise o c√≥digo abaixo para o melhor, pior caso e caso m√©dio.
# Fa√ßa a analise de complexidade de espa√ßo tamb√©m.
# def kids_with_candies(candies, extra_candies):
#     # parece que a solu√ß√£o percorre o array somente uma vez,
#     # por√©m isto √© feito duas vezes, uma no `max` e outra para
#     # preencher a resposta
#     max_candies = max(candies)
#     return [candy + extra_candies >= max_candies for candy in candies]
# # sa√≠da: [True, True, True, False, True]
# print(kids_with_candies([2, 3, 5, 1, 3], 3))
""" R = ./ex6-analise-de-complexidade.py """

# --------------------------------------------------------------------------- #
# - > EXERC√çCIO do dia - 35.1 - <--- / FIM --------------------------------- //
# ########################################## Complexidade de algoritmos
# - Conclu√≠do ... ------------------------------------------------------------ #


""" Recursos Adicionais """
# O que √© um problema NP completo? - Stack Overflow
# https://pt.stackoverflow.com/a/34131

# Competitive Programmer‚Äôs Handbook
# https://cses.fi/book/book.pdf

# Using Rust to Scale Elixir for 11 Million Concurrent Users
# https://blog.discord.com/using-rust-to-scale-elixir-for-11-million-concurrent-users-c6f19fc029d3

# Understanding time complexity with Python
# https://towardsdatascience.com/understanding-time-complexity-with-python-examples-2bda6e8158a7
