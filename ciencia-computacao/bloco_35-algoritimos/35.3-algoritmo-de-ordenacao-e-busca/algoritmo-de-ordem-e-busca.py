# ########################################## Algoritmos de ordena√ß√£o e busca
# --> CONTE√öDO do dia - 35.3 - <--- / INICIO ----------------------------- //
# ########################################## Algoritmos de ordena√ß√£o e busca

# Algoritmos de Ordena√ß√£o
# Algoritmos de Busca

""" ---> OBJETIVO <---
- Implementar algoritmos de busca como busca linear e busca bin√°ria;
- Escrever algoritmos de ordena√ß√£o, como por exemplo, ordena√ß√£o por bolha, inser√ß√£o, sele√ß√£o;
- Utilizar t√©cnicas de "for√ßa bruta" e "dividir e conquistar";
- Analisar a complexidade e escolher o algoritmo adequado para seu problema.

"""

# ---> Conte√∫dos <---

"""  --------------------------------------------------------------------------- 
| -> Algoritmos de Ordena√ß√£o <-  ( sorting algorithms )                        |
---------------------------------------------------------------------------  """
# - Algoritmo de ordena√ß√£o(sorting algorithms) s√£o uma categoria de algoritmos que buscam colocar elementos de uma sequ√™ncia em uma determinada ordem definida.
# Esta ordem pode ser num√©rica, lexicogr√°fica ou por qualquer outra caracter√≠stica.
# As raz√µes para se ordenar uma sequ√™ncia podem variar desde facilitar a visualiza√ß√£o at√© facilitar uma busca.

""" Algoritmos de ordena√ß√£o que usam for√ßa bruta """
# - for√ßa bruta caracteriza-se por ser uma t√©cnica que se testa todas as possibilidades existentes para resolver um problema.

# imagine que voc√™ tem um cadeado com 4 d√≠gitos, cada um de 0-9. Voc√™ esqueceu sua combina√ß√£o, mas n√£o quer comprar outro cadeado. Como voc√™ n√£o consegue se lembrar de nenhum dos d√≠gitos, √© necess√°rio usar um m√©todo de for√ßa bruta para abrir a fechadura. Portanto, voc√™ define todos os n√∫meros de volta para 0 e os tenta um por um: 0001 , 0002 , 0003 e assim por diante at√© que seja aberto.

""" Selection Sort """
# A ordena√ß√£o por sele√ß√£o(selection sort), divide o array em duas partes, uma j√° ordenada e outra de itens a serem ordenados.
# Em seguida, selecionaremos o menor elemento na lista n√£o ordenada e o incluiremos na lista ordenada.
# Isto ser√° feito continuamente at√© que nossa lista de elementos n√£o ordenados se esgote, e logo teremos uma lista com os itens ordenados.
""" 
# Vamos supor os n√∫meros n√£o ordenados
- ordenados =
- n√£o ordenados = 3 6 1 7

# Buscamos entre os elementos n√£o ordenados o menor elemento
- menor = 1

# Vamos adicion√°-lo a lista de elementos ordenados
- ordenados = 1
- n√£o ordenados = 6 3 7

# Agora repetimos o passo de busca
- menor = 3

# Assim teremos
- ordenados = 1 3
- n√£o ordenados = 6 7

# Como ainda n√£o esgotamos os n√∫meros a serem ordenados repetiremos a busca
menor = 6

# Agora temos quase todos os elementos ordenados
- ordenados = 1 3 6
- n√£o ordenados = 7

# Faremos a busca pelo menor elemento novamente (√∫nico)
- menor = 7

# Esgotamos as possibilidades e temos nossa lista ordenada
- ordenados = 1 3 6 7
 """

# Na pr√°tica
# ./selection-sort.py 

# independente de todos os elementos estarem ordenados (ou n√£o), ou parcialmente ordenados, sempre teremos que percorrer o array completamente e tamb√©m n - 1 elementos a cada itera√ß√£o. Isto nos leva a uma complexidade O(n¬≤)

""" Insertion Sort """
# A ordena√ß√£o por inser√ß√£o(insertion sort), tem esse nome por inserir um elemento de cada vez em sua posi√ß√£o correta. Fazendo uma analogia a um jogo de cartas, onde sua "m√£o" esteja ordenada, √© como se a cada nova carta recebida fossemos movendo ela at√© achar a posi√ß√£o correta e a inserimos ali, e faremos isso sucessivamente at√© que n√£o tenha novas cartas e por consequ√™ncia, nossa m√£o esteja ordenada.
""" 
# Vamos supor os n√∫meros n√£o ordenados
- cole√ß√£o = 3 2 1 7

# vamos pegar o primeiro elemento e mov√™-lo at√© sua posi√ß√£o
- elemento = 3

# como n√£o h√° elementos a esquerda de 3 n√£o o movemos
- cole√ß√£o = 3 2 1 7

# agora vamos pegar o segundo elemento
- elemento = 2

# vamos mov√™-lo √† esquerda, enquanto seu valor for menor
# que o elemento a sua esquerda
             ‚§∫
- cole√ß√£o = 2 3 1 7

# pr√≥ximo elemento da cole√ß√£o
- elemento = 1

# vamos inseri-lo na  posi√ß√£o correta,
# movendo para a esquerda enquanto seu valor for menor
# que o elemento a esquerda
             ‚§∫ ‚§∫
- cole√ß√£o = 1 2 3 7

# por fim verificamos o √∫ltimo elemento
- elemento = 7

# n√£o h√° elementos menores a esquerda
# e a cole√ß√£o est√° ordenada
- cole√ß√£o = 1 2 3 7
 """

# Na pr√°tica
# ./insertion-sort.py

# Como precisamos percorrer cada um dos elementos, e depois percorrer comparando os elementos √† esquerda do mesmo, em um pior caso, onde o array esteja inversamente ordenado, teremos uma complexidade de O(n¬≤) . Isto se repete tamb√©m em m√©dia, para arrays parcialmente ordenados. Por√©m se inicialmente o array estiver ordenado, este algoritmo ter√° complexidade O(n)

""" Algoritmos de ordena√ß√£o que usam solu√ß√µes iterativas """
# - Solu√ß√µes iterativas consistem na realiza√ß√£o de uma ou mais opera√ß√µes repetidas vezes, por meios de comandos de repeti√ß√£o. As ordena√ß√µes demonstradas acima (sele√ß√£o, inser√ß√£o), s√£o consideradas iterativas, pois estamos realizando opera√ß√µes de compara√ß√£o e troca de elementos repetidas vezes, por meios de comandos de repeti√ß√£o ( for ).
# üí° Toda solu√ß√£o iterativa pode ser reescrita de forma recursiva.

""" Bubble Sort """
# ordena√ß√£o por bolha(bubble sort), t√™m esse nome, pois a movimenta√ß√£o dos elementos lembra o movimento das bolhas em um refrigerante. S√£o realizadas m√∫ltiplas itera√ß√µes sobre a cole√ß√£o, sempre comparando o valor ao item adjacente e realizando a troca daqueles que est√£o fora de ordem. A cada itera√ß√£o o pr√≥ximo maior valor √© colocado em sua posi√ß√£o correta, ou seja, cada item se desloca como uma bolha para a posi√ß√£o a qual pertence.
""" 
# Vamos supor os n√∫meros n√£o ordenados
- cole√ß√£o = 7 5 1 2

# vamos realizar a primeira itera√ß√£o.
# Comparamos os dois primeiros elementos (√≠ndices 0 e 1)
- 7 > 5 ?

# como o 7 √© maior 5, faremos a troca de posi√ß√£o

           ‚§∫
- cole√ß√£o = 5 7 1 2
           ‚§ª
# Agora comparamos os elementos dos √≠ndices 1 e 2

- 7 > 1?

# Novamente faremos a troca
             ‚§∫
- cole√ß√£o = 5 1 7 2
             ‚§ª

# Depois, comparamos os √≠ndices 2 e 3

- 7 > 2

# Mais uma vez faremos a troca
               ‚§∫
- cole√ß√£o = 5 1 2 7
               ‚§ª

# Como houveram trocas, vamos iterar mais uma vez nossa cole√ß√£o
# O elemento 7, como uma bolha, foi subindo at√© sua posi√ß√£o
- cole√ß√£o = 5 1 2 7

# Comparamos os primeiros elementos e faremos a troca
           ‚§∫
- cole√ß√£o = 1 5 2 7
           ‚§ª

# Em seguida comparamos os pr√≥ximos elementos e faremos a troca novamente

             ‚§∫
- cole√ß√£o = 1 2 5 7
             ‚§ª
# Como houveram trocas precisamos iterar novamente a nossa cole√ß√£o
- cole√ß√£o = 1 2 5 7

# Por√©m desta vez n√£o h√° trocas e nossa cole√ß√£o est√° ordenada
 """

# Na pr√°tica
# ./bubble-sort.py

""" Algoritmos de ordena√ß√£o que usam dividir e conquistar """
# Algoritmos que utilizam da t√©cnica de dividir e conquistar , consistem em dividir um problema grande em partes menores, encontrar solu√ß√µes para as partes menores, e ent√£o combinar as solu√ß√µes obtidas em uma solu√ß√£o global. Esta t√©cnica produz um algoritmo eficiente, caso a divis√£o e conquista sejam eficientes.
# üí° Os algoritmos abaixo foram implementados de forma recursiva, mas lembre-se, toda solu√ß√£o recursiva pode ser reescrita de forma iterativa.


""" Merge sort """
# - A ordena√ß√£o por mistura ( merge sort ), √© um algoritmo onde empregamos a t√©cnica da divis√£o e conquista. Vamos dividindo a nossa cole√ß√£o em por√ß√µes menores, at√© uma cole√ß√£o m√≠nima. Em seguida vamos misturando as por√ß√µes, de forma ordenada, at√© que toda a cole√ß√£o seja reunida novamente resultando na ordena√ß√£o.
""" 
# Vamos supor os n√∫meros n√£o ordenados
- cole√ß√£o = 7 5 1 2 8 4 6 3

# Separamos nosso array em por√ß√µes menores
- 7 5 1 2         8 4 6 3

# continuamos fazendo isto
# at√© a menor por√ß√£o poss√≠vel (1)
- 7 5    1 2    8 4    6 3

# At√© a menor por√ß√£o poss√≠vel (1)
- 7    5    1    2    8    4    6    3

# Feito o processo de divis√£o, vamos ao processo de conquista.
# Vamos reagrupando as divis√µes mas de forma ordenada
- 5 7    1    2    8    4    6    3

- 5 7    1 2    8    4    6    3

- 5 7     1 2    4 8    6    3

- 5 7     1 2    4 8    3 6

# Continuamos o reagrupamento
- 1 2 5 7    4 8    3 6

- 1 2 5 7    3 4 6 8

# Por fim misturamos todos os elementos
- 1 2 3 4 5 6 7 8
"""

# Na pr√°tica
# ./merge-sort.py

# A separa√ß√£o em partes traz uma complexidade O(log n) , e as misturas O(n) . Com isso, temos uma complexidade de O(n log n) , independente do array estar ordenado por completo, n√£o ordenado, ou parcialmente ordenado.
# Como √© um algoritmo recursivo, consome mais mem√≥ria, possuindo uma complexidade de espa√ßo O(n) , ou seja, cresce linearmente proporcional a entrada de dados.

""" Quick Sort """
# - √© um algoritmo que tamb√©m utiliza da t√©cnica de divis√£o e conquista. Sua estrat√©gia de ordena√ß√£o consiste em determinar um elemento piv√¥ (nome dado ao elemento que divide o array em por√ß√µes menores). Em seguida, todos os elementos maiores que o piv√¥ ser√£o colocados a direita e os menores a esquerda. Com isto, o piv√¥ estar√° em sua posi√ß√£o correta e teremos duas sub cole√ß√µes n√£o ordenados ao seu redor. Recursivamente ordenamos os sub arrays, repetindo o mesmo processo de escolha do piv√¥ e particionamento (divis√£o).
""" 
# Vamos supor os n√∫meros n√£o ordenados
- cole√ß√£o = 7 1 2 5 4 6 3

# Faremos a escolha do elemento piv√¥.
# Este elemento ser√° o respons√°vel por particionar (dividir) a lista.
# Posso escolher qualquer elemento neste passo e, por isso,
# vou escolher o elemento do meio
- pivot = 5

# Movemos todos os elementos menores para a esquerda e os maiores para a direita (a)
- 1 2 4 3    5    7 6

# Precisamos ordenar as cole√ß√µes geradas,
# come√ßando com a lista de elementos inferiores
- 1 2 4 3

# Novamente escolhemos o pivot
- pivot = 2

# Novamente fazemos a divis√£o (b)
- 1    2    4 3

# A lista √† esquerda j√° n√£o tem como ser particionada,
# por√©m a da direita ainda pode ser particionada (c)
- 4 3

# Escolhendo o piv√¥ e movendo os outros elementos
# chegaremos a
- 3    4

# Agora precisamos o processo de conquista,
# voltando recursivamente ao passo (c), que pediu para ordenar
# a sub cole√ß√£o 4 3, temos como resposta
- 3 4
# essa resposta, nos faz retornar ao passo (b), onde concatenaremos ao piv√¥ a ordena√ß√£o do lado direito e esquerdo,
# resultando em
- 1 2 3 4

# Vamos agora ver o outro lado do passo (a)
- 7 6

# realizando o mesmo processo
# ap√≥s escolher o piv√¥ e realizar os movimentos teremos
- 6    7

# Por fim a resposta √© utilizada l√° no passo (a) para concatenarmos os dois lados
# e termos por fim a lista ordenada
- 1 2 3 4 5 6 7
 """

# Na pr√°tica
# ./quick-sort.py

# - Normalmente esta ordena√ß√£o ocorre com complexidade O(n log n) , por√©m em um pior caso (onde o array est√° ordenado de forma inversa), ocorrer√° com complexidade O(n¬≤) .
# üí° Curiosidade: Por baixo dos panos, quando voc√™ utiliza a fun√ß√£o sorted padr√£o do python ou faz array.sort , voc√™ est√° utilizando uma ordena√ß√£o chamada TimSort , que √© um algoritmo h√≠brido que mistura o merge sort e insertion sort. √â tamb√©m utilizado pela linguagem Java para ordenar arrays.


"""  --------------------------------------------------------------------------- 
| -> Algoritmos de Busca <-                                                    |
---------------------------------------------------------------------------  """
# - buscam um item com uma determinada propriedade dentro de uma cole√ß√£o, podendo esta cole√ß√£o ser gerada elemento a elemento, a partir de uma s√©rie de opera√ß√µes(formula matem√°tica, procedimento),
# n√£o necessitando uma cole√ß√£o de fato. 
# N√£o devem ser associados somente com arrays. 
# S√£o considerados algoritmos desta categoria √†queles que fazem travessias em estruturas de dados, com o prop√≥sito de encontrar um valor.


""" Busca Linear """
# - consiste em percorrer toda a estrutura elemento a elemento, tentando encontrar o valor. Tamb√©m √© conhecida como busca sequencial, por causa da maneira com que percorremos a estrutura em busca do valor.

# Na pr√°tica
# ./busca-linear.py

""" Busca Bin√°ria """
# - (binary search) Empregamos a t√©cnica da divis√£o e conquista. √â importante destacar que ela sup√µe que nossa cole√ß√£o est√° ordenada e seu funcionamento √© atrav√©s de m√∫ltiplas divis√µes do espa√ßo de busca, reduzindo-o, buscando o elemento no meio do espa√ßo.


# Vamos supor a seguinte lista: [1, 10, 35, 42, 51, 60, 75] e o n√∫mero buscado √© 60 . Dividimos a lista em duas partes e verificamos se o elemento do meio ( 42 ) √© o elemento procurado. Como sabemos que a lista esta ordenada e que o valor buscado √© maior que o encontrado, n√£o precisamos comparar com todos os outros √† esquerda. Vamos procurar somente os valores posteriores a ele [51, 60, 75] . Realizamos o mesmo processo de divis√£o e nosso elemento do meio passa a ser 60 . Como encontramos o valor, vamos retornar o seu √≠ndice, 5 .


# Na pr√°tica
# ./busca-binaria.py


# #####################################
# --------------------------------------------------------------------------- #
# - > CONTE√öDO do dia - 35.3 - <--- / FIM ---------------------------------- //
# #####################################
# - > AULA ao VIVO - 35.3 ----- <--- / INICIO ------------------------------ //
# --------------------------------------------------------------------------- #

# Foco de hoje
# ... Algoritmos de ordena√ß√£o e busca




# #####################################
# --------------------------------------------------------------------------- #
# - > AULA ao VIVO - 35.3 ----- <--- / FIM --------------------------------- //
# #####################################
# - > EXERC√çCIO do dia - 35.3 - <--- / INICIO ------------------------------ //
# --------------------------------------------------------------------------- #

""" Agora a pr√°tica """

""" 
Para medir o tempo de execu√ß√£o de um algoritmo (em segundos) implemente a seguinte classe :

# from time import perf_counter


# class Cronometro:
#     def __init__(self, name="Seu algoritmo"):
#         self.name = name
#     def __enter__(self):
#         self.start = perf_counter()
#     def __exit__(self, *exc):
#         elapsed = perf_counter() - self.start
#         print(f"{self.name} demorou {elapsed} segundos")
# Para utilizar o Cronometro , basta us√°-lo dentro de um with e em seguida chamar a fun√ß√£o:

# from Cronometro import Cronometro


# with Cronometro("algoritmo"):
#     algoritmo(...)
"""

# Exerc√≠cio 1: Dado um array com os seguintes elementos ["zebra", "macaco", "elefante", "arara", "javali"] , ap√≥s duas itera√ß√µes utilizando bubble sort , como estaria este array?
""" R = ["elefante", "arara", "javali", "macaco", "zebra" """

# Exerc√≠cio 2 Demonstre o passo a passo, do processo de mistura, de um array sendo ordenado, utilizando merge sort . Comece o passo a passo a partir da linha abaixo:
# 7 3    5 4    6 8    2 1
""" R = ./ex2-merge-sort.py """

# Exerc√≠cio 3 Execute os algoritmos de ordena√ß√£o por sele√ß√£o e inser√ß√£o, para as entradas de dados ordenadas, inversamente ordenadas e aleat√≥rias, em seguida, compare-os. Fa√ßa testes para entradas de tamanho 10.000, 100.000, 1.000.000.
# ü¶ú A entrada de dados pode ser gerada da seguinte maneira:
# from random import shuffle

# ordenados = list(range(100))
# inversamente_ordenados = list(reversed(range(100)))
# aleatorios = ordenados[:] # copia dos ordenados
# shuffle(aleatorios) # embaralha eles
""" R = ./ex3-ordenacao-por-selacao.py """

# Exerc√≠cio 4 Compare o tempo de execu√ß√£o do algoritmo merge_sort e bubble_sort para uma entrada de 10.000 valores aleat√≥rios. Explique atrav√©s de an√°lise de complexidade o que ocorre.
""" R = ./ex4-merge_sort-e-bubble_sort.py """
# No bubble sort em um caso m√©dio temos uma complexidade de O(n¬≤), normalmente temos n¬≤ trocas, j√° o merge sort, como utiliza dividir e conquistar, consegue ter uma complexidade O(n log n) em m√©dia. Mesmo em um pior cen√°rio, onde ao embaralharmos os dois arrays, tornando-os inversamente ordenados, o merge sort seria mais r√°pido, pois sua complexidade ainda seria O(n log n) e o bubble sort teria complexidade quadr√°tica O(n¬≤) .


# Exerc√≠cio 5 Converta o algoritmo recursivo de busca bin√°ria em iterativo.
""" R = ./ex5-convert-recursivo-em-iterativo.py """

# Exerc√≠cio 6 Para descobrirmos qual commit introduziu um erro no sistema, precisamos voltar no tempo verificando os commits antigos, de modo a descobrir um commit em que os testes falham.
# Supondo que isto ser√° representado como um array de booleanos , descubra o √≠ndice onde o erro ocorreu pela primeira vez.
# Como os testes demoram a rodar, resolva o problema rodando o m√≠nimo de testes poss√≠veis.
# entrada: [True, True, True, True, False, False, False]
# sa√≠da: 4
# entrada: [True, True, False, False, False, False, False]
# sa√≠da: 2
# üí° Curiosidade: O comando git bisect executa de maneira similar a este exerc√≠cio, se implementado de forma eficiente üòÇ.
""" R = ./ex6-verifica-commits.py """


# #####################################
# --------------------------------------------------------------------------- #
# - > EXERC√çCIO do dia - 35.3 - <--- / FIM --------------------------------- //
# ########################################## Algoritmos de ordena√ß√£o e busca
# - Conclu√≠do ... ------------------------------------------------------------ #

""" Recursos Adicionais """
# Visualiza√ß√£o gr√°fica dos algoritmos de ordena√ß√£o
# https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html

# Programa√ß√£o Din√¢mica - Playlist sobre ordena√ß√µes
# https://www.youtube.com/watch?v=ZT_dT8yn48s&list=PL5TJqBvpXQv4l7nH-08fMfyl7aDFNW_fC

# Visualiza√ß√£o gr√°fica dos algoritmos de busca
# https://www.cs.usfca.edu/~galles/visualization/Search.html

# Programa√ß√£o Din√¢mica - Busca Bin√°ria
# https://youtu.be/EgLE5HwRy_M
