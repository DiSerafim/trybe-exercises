# ########################################## Pilhas e Filas
# --> CONTE√öDO do dia - 37.2 - <--- / INICIO ----------------------------- //
# ########################################## Pilhas e Filas

# Problema
# Come√ßando uma solu√ß√£o
# O que √© uma pilha?
# Concluindo nossa solu√ß√£o
# Quais as opera√ß√µes mais comuns?
# Utilizando pilhas
# Analogia com o Mundo Real
# E os outros problemas?
# Filas


""" ---> OBJETIVO <---
- Entender o funcionamento da estrutura de dados pilha(stack);
- Adicionar, remover, saber a quantidade e limpar itens de uma pilha;
- Identificar e escolher o uso de pilhas em diferentes casos.
"""


# ---> Conte√∫dos <---


"""  --------------------------------------------------------------------------- 
| -> Problema <-                          
---------------------------------------------------------------------------  """
# - √Äs vezes quando estamos escrevendo um c√≥digo, podemos esquecer de fechar algum par√™ntese ou chave, o que leva a erros que o interpretador/compilador pode n√£o entender muito bem.
# Fa√ßa um programa que recebe um c√≥digo do qual foram removidos todos os outros caracteres, e verifica se todos os par√™nteses E chaves foram fechados corretamente.

# Exemplo de retorno
# True: {}()({}) , (){}
# False: {(}) , ()}


"""  --------------------------------------------------------------------------- 
| -> Come√ßando uma solu√ß√£o <-      
---------------------------------------------------------------------------  """
# - Para resolver este problema, vamos aprender o Tipo Abstrato de Dados(TAD):
# Pilha, que por acaso √© exatamente o que precisamos aqui!

# este tipo de problema foi o que levou √† inven√ß√£o da Pilha!


"""  --------------------------------------------------------------------------- 
| -> O que √© uma pilha? <-   
---------------------------------------------------------------------------  """
# - A estrutura de pilha √© uma estrutura do tipo LIFO(Last In First Out).
# O √∫ltimo elemento a entrar na pilha √© o primeiro a sair.

# Podemos criar uma pilha utilizando alguma outra estruturas de dados como 'listas encadeadas' ou 'arrays',
# com a √∫nica diferen√ßa que todas as opera√ß√µes devem ocorrer com o elemento mais ao topo, no √∫ltimo elemento adicionado.
# Em nosso exemplos vamos utilizar o 'built-in list'


"""  --------------------------------------------------------------------------- 
| -> Concluindo nossa solu√ß√£o <-                
---------------------------------------------------------------------------  """
# - "Precisamos de uma forma de lembrar n√£o somente a quantidade de aberturas, como tamb√©m a ordem"

# A pilha faz exatamente isso!üòé
# Veja o exemplo da string ( { } ) }

# Agora, para verificar se eles est√£o sendo fechados corretamente, basta verificarmos o pr√≥ximo s√≠mbolo que acharmos com o s√≠mbolo que est√° no topo da nossa pilha:
# Se acharmos um }, no topo da pilha deve existir um {.
# Se acharmos um ), o topo da pilha deve ter um (, e ao final da string, a pilha deve estar vazia, significando que todos os s√≠mbolos acharam seu devido par na ordem correta.

# Conseguimos assim verificar o balanceamento de par√™nteses e chaves! Este problema √© cl√°ssico, pois Pilhas √© exatamente o conceito utilizado por compiladores e interpretadores para entender opera√ß√µes matem√°ticas, a qual escopo pertence cada bloco, come√ßo e final de strings, e muitas outras coisas.


"""  --------------------------------------------------------------------------- 
| -> Quais as opera√ß√µes mais comuns? <-          
---------------------------------------------------------------------------  """
# - Existem algumas opera√ß√µes que s√£o comuns de serem utilizadas.
# S√£o elas: push, pop, e peek.

""" push """
# Adiciona um item no topo da pilha.
# Vale frisar novamente que, quando estamos utilizando pilhas, podemos adicionar novos valores somente no topo dela.
# Lembrando da an√°logia com o porta moedas, n√≥s n√£o conseguimos simplesmente adicionar uma moeda no meio das moedas j√° adicionadas.
# Para esse caso ter√≠amos que remover as moedas de cima e ent√£o adicionar a moeda que queremos para ent√£o adicionar as demais moedas de volta.

""" pop & peek """
# s√£o utilizadas para ler valores do topo da pilha.

""" pop """
# remove o item da pilha

""" peek """
# somente l√™ o item.


"""  --------------------------------------------------------------------------- 
| -> Utilizando pilhas <-                                   
---------------------------------------------------------------------------  """

# - Implementa√ß√£o de uma pilha utilizando Python

# #1 iremos declarar a classe chamada Stack no arquivo.
# vamos declarar o construtor para termos uma pilha vazia e duas propriedades que ser√£o √∫teis para implementar as funcionalidades da pilha.
# A primeira propriedade nos retorna o tamanho da pilha e a segunda propriedade nos indica se a pilha esta vazia.
""" ./stack.py """

# #2 Ap√≥s adicionar as fun√ß√µes auxiliares, vamos adicionar as opera√ß√µes de
# "push"(empilhar itens) e 
# "pop"(remover itens do topo da pilha).
# Com esses m√©todos j√° poderemos manipular valores na pilha.
""" ./stack.py """

# #3 Nem sempre √© interessante remover o valor da pilha, por isso iremos implementar o m√©todo "peek" que somente l√™ o valor no topo da pilha e ent√£o o retorna.
""" ./stack.py """

# #4 A √∫ltima funcionalidade da pilha √© um m√©todo para limpa-la.
# "clear", que se encarregar√° de limpar todos os elementos da pilha.
""" ./stack.py """

# #5 m√©todo "__str__" que far√° a impress√£o de todos os elementos que est√£o empilhados
# Do primeiro ao √∫ltimo item inserido (da parte de baixo da pilha at√© o topo).
""" ./stack.py """


""" Onde pilhas s√£o normalmente utilizadas """
# As pilhas s√£o utilizadas para resolver diversos problemas em linguagens de programa√ß√£o.
# Muitas linguagens utilizam a pilha para poder controlar o estado das chamadas de fun√ß√µes ou para resolver express√µes matem√°ticas e l√≥gicas.

# Pilhas tamb√©m podem ser utilizadas para replicar o funcionamento de algoritmos recursivos, ou qualquer outro cen√°rio em que temos uma cole√ß√£o de elementos e precisamos controlar qual foi o elemento mais recente.

# As pilhas, conceitualmente, n√£o t√™m limite de tamanho, por√©m nas implementa√ß√µes reais a linguagem de programa√ß√£o define um tamanho m√°ximo, pois nossos computadores t√™m mem√≥ria limitada.
# Quando, fazemos uma chamada recursiva sem uma condi√ß√£o de parada correta, a pilha de chamadas vai aumentando at√© o estourar o limite da linguagem.
# Ao tentarmos adicionar mais um valor, a pilha "transborda" e lan√ßa um erro.
# ... Sabe como √© o nome desse erro?
# Stack. Overflow.


""" Utiliza√ß√£o de pilhas no controle da chamada de fun√ß√µes """
# A linguagem Python, utiliza a pilha em duas importantes funcionalidades da aplica√ß√£o.
# A primeira √© para controlar as chamadas da fun√ß√µes, a linguagem mant√©m uma pilha com quais fun√ß√µes devem ser executadas ap√≥s a execu√ß√£o de uma fun√ß√£o.

# Considerando que temos uma fun√ß√£o com o nome "process_video" e ela recebe um argumento indicando o caminho de um v√≠deo.
# Dentro dessa fun√ß√£o √© invocado a fun√ß√£o load_video, recebendo tamb√©m o argumento do caminho do v√≠deo repassado da fun√ß√£o "process_video".
""" ./process_video.py """

# Nesse c√≥digo, ao invocarmos a fun√ß√£o para processar o video, o interpretador do Python come√ßa a executa-la e, ao chegar na linha que invocamos a fun√ß√£o de leitura do video, o Python faz um 'push' da fun√ß√£o corrente(process_video()) na pilha de execu√ß√£o, com todo o seu contexto, para ent√£o executar a fun√ß√£o de leitura.
# Quando a fun√ß√£o de leitura for finalizada o Python ir√° fazer um 'pop' da pilha para continuar a execu√ß√£o da aplica√ß√£o.
# Se adicionarmos a fun√ß√£o traceback.print_stack(file=sys.stdout) conseguimos ver quais os itens presentes na 'call stack' do Python.
""" ./process_video.py """

""" Utiliza√ß√£o de pilhas na resolu√ß√£o de express√µes """
# Existem diversos tipos de representa√ß√£o de express√µes, como por exemplo, "infixa" e p√≥s "fixa".

# Quando escrevemos a express√£o (A + B) * C estamos escrevendo uma express√£o no formato "infixa".
# Quando escrita no formato p√≥s fixa, ficaria um pouco diferente: A B + C *

# Basicamente n√≥s pegamos os 'A e B' para aplicarmos a opera√ß√£o de soma(o + logo ap√≥s as vari√°veis).
# Quando obtivermos o resultado da soma, aplicamos a opera√ß√£o de multiplica√ß√£o com a vari√°vel 'C'(o * logo ap√≥s o C), iremos resolvendo a express√£o sempre 'de dois em dois operadores', da esquerda para a direita.

# considerando os valores A = 5, B = 10 e C = 3:
"""
x = (A + B) * C
x = A B + C *
x = 5 10 + 3 *
"""
# O primeiro passo √© pegar os dois primeiros valores e executar a opera√ß√£o de soma, (5 10 + ).
# O resultado dessa soma √© 15

# A nova express√£o fica assim:
"""
x = (A + B) * C
x = A B + C *
x = 5 10 + 3 *
x = 15 3 *
"""
# Ent√£o repetiremos o primeiro passo, mas para opera√ß√£o de multiplica√ß√£o.
# Iremos pegar os dois primeiros valores da express√£o e executaremos a opera√ß√£o de multiplica√ß√£o,
# (15 3 *).
# O resultado dessa multiplica√ß√£o √© 45.
"""
x = (A + B) * C
x = A B + C *
x = 5 10 + 3 *
x = 15 3 *
x = 45
"""

# Como pilhas s√£o utilizadas para a resolu√ß√£o de express√µes p√≥s fixa?
# Percebam que resolvemos a express√£o da esquerda para a direita, sempre aplicando as opera√ß√µes nos dois √∫ltimos n√∫meros da express√£o.
# Dessa forma conseguimos adicionar esses n√∫meros numa pilha e ent√£o aplicamos a opera√ß√£o no primeiro e no segundo item do topo da pilha, at√© que reste somente um item na pilha(nosso resultado final).
# Considerando a primeira parte da express√£o que resolvemos acima 10 5 +, n√≥s iremos adicionar o valor 10 e 5 no topo da pilha e quando lermos o valor + aplicaremos a opera√ß√£o nos dois itens do topo.
# Ent√£o adicionamos o resultado no topo da pilha:


""" Implementando uma fun√ß√£o que resolve express√µes p√≥s fixas """
# (A + b) * C.
# Vamos implementar uma fun√ß√£o que receba essa express√£o, em formato de string, 'p√≥s fixa' e ent√£o calcule o resultado da express√£o.
""" expression_solver.py """


"""  --------------------------------------------------------------------------- 
| -> Analogia com o Mundo Real <-   
---------------------------------------------------------------------------  """
# Quais desses itens podemos utilizar o conceito de pilhas para podermos organiz√°-los?

# - Um monte de roupa jogado no canto;                          ‚òë
# - Porta moedas;                                               ‚òë
# - Pessoas esperando a sua vez para serem atendidas no banco;  ‚ùå
# - Carros parados aguardando o sem√°foro abrir;                 ‚òë
# - Diversos livros um em cima do outro;                        ‚òë
# - Roupas dobradas na gaveta.                                  ‚òë


"""  --------------------------------------------------------------------------- 
| -> E os outros problemas? <-                
---------------------------------------------------------------------------  """
# - A analogia ao mundo real que acabamos de fazer demonstra uma coisa:

# Nem todos os problemas podemos tratar como uma pilha.
# A fila do banco.
# Imagine que voc√™ acabou de chegar na fila necessitando atendimento.
# Voc√™ espera receber o atendimento imediatamente ap√≥s as pessoas que chegaram antes de voc√™, certo?
# Se tratarmos isso como uma pilha, a primeira que pessoa que chegou vai ser atendida por √∫ltimo, e provavelmente vai ficar esperando umas 8 horas at√© o banco fechar, pois a fila continua cheia o dia inteiro.


"""  --------------------------------------------------------------------------- 
| -> Filas <-          
---------------------------------------------------------------------------  """
# - Assim como temos a mentalidade 'First In, Last Out' para problemas que s√£o pilhas, precisamos de outra mentalidade para problemas que s√£o filas: 'First In, First Out'(FIFO).
# Quem chega primeiro recebe atendimento primeiro, nada mais justo.
# Assim, todos ser√£o atendidos com uma demora mais parecida.

# Na computa√ß√£o tamb√©m temos problemas que requerem a mentalidade FIFO.
# J√° parou para pensar como √© que um processador com um √∫nico n√∫cleo consegue rodar um sistema operacional inteiro, e mais 17 programas ao mesmo tempo?
# Cada programa demanda uma s√©rie de opera√ß√µes, e um n√∫cleo s√≥ pode executar uma de cada vez; ele coloca as opera√ß√µes em uma fila, e resolve estas opera√ß√µes uma por uma, garantindo assim que todos os programas consigam rodar e prosseguir em suas tarefas.

# Assim como a pilha, o TAD Fila(queue) tamb√©m pode ser implementada tanto em um array como em uma lista; o importante n√£o √© a forma que ela √© implementada em c√≥digo, mas sim a forma que ela se comporta; que m√©todos ela exp√µe.
# No caso da fila, as opera√ß√µes devem ser as seguintes:
""" Push """
# Adiciona um elemento no final da fila
""" Pop """
# Remove e retorna o primeiro elemento da fila

# a √∫nica diferen√ßa da fila √© que a remo√ß√£o(Pop) ocorre no come√ßo, em vez de no final.
# Apenas essa diferen√ßa causa um funcionamento totalmente diferente, que soluciona problemas diferentes!
# Fica para voc√™ o desafio de implementar a opera√ß√£o Pop() da fila, que √© o que a diferencia da Pilha.
""" ??? """


# #####################################
# --------------------------------------------------------------------------- #
# - > CONTE√öDO do dia - 37.2 - <--- / FIM ---------------------------------- //
# #####################################
# - > AULA ao VIVO - 37.2 ----- <--- / INICIO ------------------------------ //
# --------------------------------------------------------------------------- #

# Foco de hoje
# ... Pilhas e Filas

''' First in, first out | Lastin, last out '''

'''  QUEUE (fila) '''
# Filas - Opera√ß√µes
# - Opera√ß√µes de Fila

# Push | Insere no Fim üèå
# Pop  | Remove no in√≠cio ‚ùå
# Peek | Visualiza no in√≠cio üëÄ

# https://visualgo.net/en

# - Peek (Olhadinha)
head = [85, 93, 41, 3, 81, 91]
# if empty return NOT_FOUND
# return head.item
# Retorna o valor armazenado na cabe√ßa: 85.

# - Enqueue (Enfileirar)
head = [85, 93, 41, 3, 81, 91]
v = 57
# vtx = new Vertex(v)
# tail.next = vtx
# tail = vtx
# Agora, a tail aponta para o novo v√©rtice tamb√©m. 85, 93, 41, 3, 81, 91, 57

# - Dequeue (desenfileirar) ou (fur√£o de fila)
head = [85, 93, 41, 3, 81, 91, 57]
# if empty, do nothing
# temp = head
# head = head.next
# delete temp
# Agora, 93, 41, 3, 81, 91, 57

''' ./fila_deque.py '''

''' ./fila_queue_with_deque.py '''


''' STACK (pilhas) '''
# - o √∫timo que entra √© o primeiro que sai

# Pilhas - Opera√ß√µes
# - Opera√ß√µes de Pilhas

# Push | Insere no Topo üëÜ
# Pop  | Remove no Topo  ‚ùåüëÜ
# Peek | Visualiza Topo  üëÄüëÜ

# https://visualgo.net/en

# - Peek (Olhadinha)
header = [60, 31, 65]
# if empty return NOT_FOUND
# return head.item
# Retorna o valor armazenado na header: 60.

# - Push (Empurre)
header = [23, 60, 31, 65]
v = 23
# Vertex vtx = new Vertex(v)
# vtx.next = head
# head = vtx
# Retorna o valor armazenado na header: 23, 60, 31, 65.

# - Pop (excluir)
header = [23, 60, 31, 65]
# if empty do nothing:
#     temp = head
#     head = head.next
# delete temp
# Retorna o valor armazenado na header: 60, 31, 65


''' Problema - Validar par√™nteses '''
# Criar uma  fun√ß√£o chamada is_valid() que receber√° uma string formada por (,), [,], { e }.
# A fun√ß√£o deve verificar se os "par√™nteses", s√£o v√°lidos seguindo as regras:
# - Os 'caracteres de abertura' devem possuir os 'caracteres de fechamaneto' correspondente;
# - Os caracteres de abertura devem ser fechados na ordem correta;

# Exemplo:
str = "()"        # True
str = "))(("      # False
str = "()[]{}"    # True
str = "(())"      # True
str = "[]"        # True
str = "(]"        # False
str = "[[]"       # False
str = "[[]]"      # True
str = "{}"        # True
str = "{{}"       # False
str = "([)]"      # False
str = "asdasdasd" # None
str = "34134345"  # None

''' ./pilha_stack.py '''

''' ./pilha_basebal_game.py '''


''' Problema - Jogo de baseball '''
# Criar uma fun√ß√£o que receba uma 'lista de string' e calcule o somat√≥rio do total da tardida de baseball.
# Cada item da lista consiste em uma rodada da partida para determinado time.
# As regras para se calcular os pontos s√£o as seguintes:
# - Inteiro: Representa os 'pontos' para a rodada;
# - +: Os pontos para a rodada ser√° o 'somat√≥rio' das 'duas' √∫timas rodadas v√°lidas;
# - D: Os pontos para a rodada ser√° igual ao 'dobro' da '√∫ltima' rodada v√°lida;
# - C: Representa que os pontos da '√∫ltima rodada' v√°lida devem ser removidos;

# Exemplo:
str = ['1', '2', '+', 'D', 'C']
# Rodada 1: Foi feito 1 pontos pelo time
# Rodada 2: Foi feito 2 pontos pelo time
# Rodada 3: Foi feito o somat√≥rio entre as duas √∫timas rodadas, dando o valor de 3 pontos na rodada.
# Rodada 4: Foi dobrado o valor da √∫ltima rodada v√°lida. Nessa rodada form feitos 6 pontos
# Rodada 5: Foi removido o valor da √∫ltima rodada v√°lida, nessa rodada o time perdeu os 6 pontos da √∫ltima rodada
# Rodadas: 1 2 3 4 5
# Sa√≠da: 6 pontos(1 + 2 + 3 + 6 - 6)
''' ./pilha_validate_parenteses.py '''














# #####################################
# --------------------------------------------------------------------------- #
# - > AULA ao VIVO - 37.2 ----- <--- / FIM --------------------------------- //
# #####################################
# - > EXERC√çCIO do dia - 37.2 - <--- / INICIO ------------------------------ //
# --------------------------------------------------------------------------- #

""" Agora a pr√°tica """

""" Exerc√≠cio 1: """
# Estenda a classe Stack, que escrevemos durante as explica√ß√µes do conte√∫do, adicionando uma nova fun√ß√£o chamada min_value() que ir√° retornar o menor valor inteiro presente na pilha.
# stack.py
# content_stack.push(1)
# content_stack.push(-2)
# content_stack.push(3)
# print(content_stack.min_value()) # sa√≠da: -2
# Fonte: Min Stack
# https://leetcode.com/problems/min-stack/
""" ./ex1.py """

""" Exerc√≠cio 2: """
# Estenda a classe Stack, que escrevemos durante as explica√ß√µes do conte√∫do, para que ela suporte um limite de itens dentro da pilha.
# Se definirmos que a pilha deve ter o tamanho 2, ela n√£o poder√° ter 3 itens.
# stack_limit.py
# content_stack = LimitStack(2)
# content_stack.push(1)
# content_stack.push(-2)
# try:
#     content_stack.push(3)
# except StackOverflow:
#     print("N√£o √© poss√≠vel adicionar outro item √† pilha")
# Dica: Para esse exerc√≠cio, crie uma nova classe, no mesmo diret√≥rio da classe Stack .
""" ./ex2.py """

""" Exerc√≠cio 3: """
# Um estacionamento comercial possui uma garagem em forma de linha, somente √© poss√≠vel parar os carros enfileirados.
# Para auxiliar as pessoas que trabalham manobrando os ve√≠culos, iremos escrever um programa para que eles consigam adicionar novos ve√≠culos na garagem e retirar os ve√≠culos conforme a solicita√ß√£o dos clientes.
# Escreva um programa que fa√ßa essas duas opera√ß√µes, inser√ß√£o de ve√≠culos e a remo√ß√£o do ve√≠culo desejado pela pessoa.
# Lembrando que os ve√≠culos que foram removidos para se chegar no ve√≠culo do cliente, ficam parados na rua e depois s√£o adicionados na mesma ordem que estavam no estacionamento.
""" ./ex3.py """

""" Exerc√≠cio 4: """
# Dada a fun√ß√£o que faz a resolu√ß√£o de express√µes p√≥s fixas, adicione as opera√ß√µes de subtra√ß√£o e divis√£o.
# Nota: transforme as express√µes em p√≥s fixas e atribua valores.
# Caso seja necess√°rio, fa√ßa o cast do valor para ponto flutuante.
# Epress√£o infixa
# A + B - C / A
# B + (A * C) / C * 2
# A * B - C + 4 * A - B
# (A + C / B) * (A + B)
# 50 * B / 2 * 5 / A
# Lista Express√µes
""" ./ex4.py """

""" Exerc√≠cio 5: """
# Dado uma string, contendo letras e par√™nteses.
# Crie uma fun√ß√£o que ir√° reverter os caracteres de tal forma que somente os caracteres dentro dos par√™nteses sejam revertidos.
# A string final n√£o deve conter os par√™nteses.
# string = 'teste(lagel)'
# resultado = 'testelegal'
# Fonte: Reverse Substrings Between Each Pair of Parentheses
# https://leetcode.com/problems/reverse-substrings-between-each-pair-of-parentheses/
""" ./ex5.py """


# #####################################
# --------------------------------------------------------------------------- #
# - > EXERC√çCIO do dia - 37.2 - <--- / FIM --------------------------------- //
# ########################################## Pilhas e Filas
# - Conclu√≠do \o/ ------------------------------------------------------------ #


""" Recursos Adicionais """
# Stacks - A Level Computer Science
# https://www.youtube.com/watch?v=zIbQf_yR7-U

# Stack - LeetCode
# https://leetcode.com/tag/stack/

# Stack Data Structure
# https://www.geeksforgeeks.org/stack-data-structure/
