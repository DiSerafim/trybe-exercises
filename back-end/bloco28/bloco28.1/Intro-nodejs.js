// ============================== NodeJS - JWT - (JSON Web Token)
// -- > CONTE√öDO do dia - 28.1 -- <---/ INICIO --------------------------------------//
// ==============================

// O que √© o JWT?
// Entendendo o JWT
// Show me the code!
// Implementando JWT

// ### Conte√∫dos

// >>> O que √© o JWT?
// - √© um token gerado a partir de dados "pessoais" que pode ser trafegado pela internet ao fazer requisi√ß√µes para APIs e afins. Mas aten√ß√£o: toda a informa√ß√£o que colocamos no JWT √© p√∫blica

// - O navegador solicita que o usu√°rio digite seu login e senha.
// - O navegador ent√£o envia esse login e senha ao servidor, para verificar que esses dados est√£o corretos.
// - Uma vez que valida login e senha, o servidor cria dois objetos: um contendo informa√ß√µes sobre o token que ser√° gerado, que chamamos de header, e outro contendo os dados do usu√°rio e as permiss√µes que aquela pessoa t√™m, ao qual chamamos de payload.
// - O servidor ent√£o converte esses dois objetos em JSON, junta-os em uma mesma string e utiliza um algoritmo chamado HMAC para "criptografar" essa string usando um "segredo" que s√≥ ele sabe, gerando o que chamamos de assinatura, que nada mais √© do que Header + Payload criptografados.
// - Por fim, o servidor combina o header, o payload originais e a assinatura, criando assim o token.
// - O token √© enviado ao cliente, que o armazena para utiliz√°-lo nas pr√≥ximas requisi√ß√µes.

// # Na pr√≥xima requisi√ß√£o...
// - O navegador envia ao servidor os dados para, por exemplo, cadastrar um novo produto. Juntamente a esses dados, o navegador envia o token que recebeu ao realizar o login.
// - Quando recebe os dados, a primeira coisa que o servidor faz √© obter o Header e o Payload do token e criptograf√°-los, gerando, mais uma vez, a assinatura.
// - O servidor, ent√£o, compara a nova assinatura com a assinatura que foi enviada pelo client. Se ambas forem iguais, quer dizer que o conte√∫do do Header e do Payload n√£o foram modificados desde o login.
// - Agora que j√° sabe que o token √© v√°lido, o servidor continua processando a requisi√ß√£o e, por fim, entrega a resposta para o cliente.

// # Autentica√ß√£o e Autoriza√ß√£o
// - √â importante ressaltar que autentica√ß√£o e autoriza√ß√£o s√£o coisas diferentes. Autentica√ß√£o √© usada para atestar que algu√©m √© quem diz ser, verificando sua identidade, comumente feita por meio de informa√ß√µes confidenciais como email e senha. J√° a autoriza√ß√£o verifica as permiss√µes de uma pessoa para acessar ou executar determinadas opera√ß√µes.

// # O que √© HMAC?
// - √© um algoritmo para gerar um MAC (c√≥digo de autentica√ß√£o de mensagem) criptografado atrav√©s de algum algoritmo de hash (algoritmos que codificam mensagens), como md5, sha1 ou sha256, a partir de uma chave secreta (uma senha) e de uma mensagem qualquer.

// # A f√≥rmula do HMAC √© a seguinte:
// - HMAC(K, m) = hash(K1 + hash(K2 + m))

// - K √© a chave secreta;
// - m √© a mensagem;
// - hash √© a fun√ß√£o de hash escolhida (md5, sha1 etc);
// - K1 e K2 s√£o chaves secretas derivadas da chave original K;
// - + √© a opera√ß√£o de concatena√ß√£o de strings.

// >>> Entendendo o JWT
// - O resultado final do JWT d√°-se atrav√©s da assinatura criptogr√°fica de dois blocos de JSON codificados em base64. Esses dois blocos JSON codificados s√£o o header(cabe√ßalho) e payload(carga) que mencionamos acima. A signature(assinatura) √© a jun√ß√£o dos hashes gerados a partir do header e payload.

// # Header
// - O Header cont√©m duas propriedades: o tipo do token, que √© JWT, e o tipo do algoritmo de hash , como HMAC-SHA256 ou RSA :
{
  "alg": "HS256",
  "typ": "JWT"
}

// # Payload (dados do usu√°rio)
// - Esta √© a segunda parte do token, que cont√©m os "dados". Esses "dados" s√£o declara√ß√µes sobre uma entidade (geralmente, o usu√°rio):
{
  "sub": "1234567890",
  "name": "John Doe",
  "admin": true
}

// # Signature
// - Para gerar a assinatura, voc√™ deve usar o header e o payload codificados em base64 , usando o algoritmo definido no header:
import { hmac } from 'bibliotecaDeHmac';

function base64 (string) {
  return Buffer.from(string).toString('base64');
}
const header = JSON.stringify({
  alg: 'HS256',
  type: 'JWT',
});
const payload = JSON.stringify({
  sub: '1234567890',
  name: 'John Doe',
  admin: true,
});
const secret = 'MinhaSenhaMuitoComplexa123';
const assinatura = hmac(`${base64(header)}.${base64(payload)}`, secret);
const token = `${base64(header)}.${base64(payload)}.${base64(assinatura)}`;
// # O resultado ter√° a seguinte estrutura:
(Header em base64).(Payload em base64).(Signature em base64)

// - Exemplo de resultado:
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVzZXIxIiwiZXhwIjoxNTQ3OTc0MDgyfQ.2Ye5_w1z3zpD4dSGdRp3s98ZipCNQqmsHRB9vioOx54

// - Header: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
// - Payload: eyJ1c2VybmFtZSI6InVzZXIxIiwiZXhwIjoxNTQ3OTc0MDgyfQ
// - Signature: 2Ye5_w1z3zpD4dSGdRp3s98ZipCNQqmsHRB9vioOx54

// # Um exemplo de envio de um JWT via header em uma requisi√ß√£o HTTP:
GET /foo/bar HTTP/1.1
Host: www.exemplo.com
Authorization: Bearer (Header em base64).(Payload em base64).(Signature em base64)

// >>> Show me the code!
// - Nodejs;
// - Express;
// - Postman;
// - MongoDB;
// - JWT.
git clone git@github.com:tryber/nodejs-jwt-base-project.git
cd nodejs-jwt-base-project
npm i
npm run dev
// # Estrutura base do projeto
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ api
‚îÇ  ‚îú‚îÄ‚îÄ routes.js
‚îÇ  ‚îî‚îÄ‚îÄ server.js
‚îú‚îÄ‚îÄ controllers
‚îÇ  ‚îú‚îÄ‚îÄ createUser.js
‚îÇ  ‚îú‚îÄ‚îÄ login.js
‚îÇ  ‚îî‚îÄ‚îÄ posts.js
‚îú‚îÄ‚îÄ models
‚îÇ  ‚îî‚îÄ‚îÄ user.js
‚îú‚îÄ‚îÄ package-lock.json
‚îî‚îÄ‚îÄ package.json

// # postman

// 1 Para come√ßar a usar a nossa plataforma, precisamos criar um usu√°rio. Para isso, faremos uma requisi√ß√£o POST para o endpoint /api/users, passando um nome de usu√°rio e senha:
// 2 vamos fazer o login. Para isso, fazemos uma requisi√ß√£o POST para o endpoint /api/login, passando o nome de usu√°rio e senha usados no cadastro:
// 3 podemos pegar as postagens do nosso blog! Fazemos uma requisi√ß√£o GET para o endpoint /api/posts/ :

// >>> Implementando JWT
// - vamos instalar o pacote jsonwebtoken . Ele √© quem ser√° respons√°vel por gerar e validar os tokens para n√≥s:
npm install jsonwebtoken

// - vamos editar o arquivo controllers/login.js . L√°, vamos trabalhar na gera√ß√£o do nosso JWT e adicionar os seguintes trechos de c√≥digo:
// const User = require('../models/user');
const jwt = require('jsonwebtoken');

/* Sua chave secreta. √â com ela que os dados do seu usu√°rio ser√£o encriptados.
   Em projetos reais, armazene-a numa vari√°vel de ambiente e tenha cuidado com ela, pois s√≥ quem tem acesso
   a ela poder√° criar ou alterar tokens JWT. */
const secret = 'seusecretdetoken';

// module.exports = async (req, res) => {
//   try {
//     const username = req.body.username;
//     const password = req.body.password;

//     if (!username || !password)
//       return res
//         .status(401)
//         .json({ message: '√â necess√°rio usu√°rio e senha para fazer login' });

//     const user = await User.findUser(username);

//     if (!user || user.password !== password)
//       return res
//         .status(401)
//         .json({ message: 'Usu√°rio n√£o existe ou senha inv√°lida' });

    /* Criamos uma config b√°sica para o nosso JWT, onde:
      expiresIn -> significa o tempo pelo qual esse token ser√° v√°lido;
      algorithm -> algoritmo que voc√™ usar√° para assinar sua mensagem
                  (lembra que falamos do HMAC-SHA256 l√° no come√ßo?). */

    /* A propriedade expiresIn aceita o tempo de forma bem descritiva. Por exemplo: '7d' = 7 dias. '8h' = 8 horas. */
    const jwtConfig = {
      expiresIn: '7d',
      algorithm: 'HS256',
    };

    /*
      Aqui √© quando assinamos de fato nossa mensagem com a nossa "chave secreta".
      Mensagem essa que cont√©m dados do seu usu√°rio e/ou demais dados que voc√™
      quiser colocar dentro de "data".
      O resultado dessa fun√ß√£o ser√° equivalente a algo como: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7Il9pZCI6IjVlNTQ1OTBiYTQ5NDQ4ZjdlNWZhNzNjMCIsInVzZXJuYW1lIjoiaXRhbHNzb2RqIiwicGFzc3dvcmQiOiJzZW5oYTEyMyIsIl9fdiI6MH0sImlhdCI6MTU4MjU4NzMyNywiZXhwIjoxNTg0Nzc0NzE0OTA4fQ.UdSZi7K105aaVnoKSW-dnw-Kv7H3oKMtE9xv4jwyfSM
      */
    const token = jwt.sign({ data: user }, secret, jwtConfig);

    /* Por fim, n√≥s devolvemos essa informa√ß√£o ao usu√°rio. */
    res.status(200).json({ token });
//   } catch (e) {
//     return res.status(500).json({ message: 'Erro interno', error: e });
//   }
// };

// # j√° podemos nos autenticar de verdade, n√£o √© mesmo? Ao fazer uma nova requisi√ß√£o POST para /api/login , passando nome de usu√°rio e senha corretos, obtemos um resultado semelhante ao seguinte:
{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7Il9pZCI6IjVlYTIyNTU3ODNkNGJjNjExNzNjZDFlNiIsInVzZXJuYW1lIjoidHVsaW9zdGFybGluZyIsInBhc3N3b3JkIjoiMTIzNDU2IiwiX192IjowfSwiaWF0IjoxNTg3Njg1MTAwLCJleHAiOjE1ODk4Nzc1ODU2MTR9.Y0JzzSuSwrl2OXugqDd0UxY7D0g0HpW3gglSLdop4KU"
}
// Eis o nosso token! √â ele que vamos ficar transitando pra l√° e pra c√°, ent√£o ele precisa ser guardado! Mas caso ele seja perdido, n√£o se preocupe; √© s√≥ gerar outro token. üôÇ

// # Agora temos que usar esse token de alguma forma, n√£o √© mesmo? Para isso, vamos criar uma pasta chamada 'auth' dentro do diret√≥rio 'api'; e, dentro dela, um arquivo chamado validateJWT.js.
// - Esse arquivo conter√° uma fun√ß√£o que ser√° usada como middleware para as nossas requisi√ß√µes, validando todas as rotas em que n√≥s solicitarmos autentica√ß√£o.

// validateJWT.js
const jwt = require('jsonwebtoken');
const model = require('../../models/user');
/* Mesma chave privada que usamos para criptografar o token.
   Agora, vamos us√°-la para descriptograf√°-lo.
   Numa aplica√ß√£o real, essa chave jamais ficaria hardcoded no c√≥digo assim,
   e muitos menos de forma duplicada, mas aqui s√≥ estamos interessados em
   ilustrar seu uso ;) */
const segredo = 'seusecretdetoken';
module.exports = async (req, res, next) => {
  /* Aquele token gerado anteriormente vir√° na requisi√ß√£o atrav√©s do
     header Authorization em todas as rotas que queremos que
     sejam autenticadas. */
  const token = req.headers['authorization'];
  /* Caso o token n√£o seja informado, simplesmente retornamos
     o c√≥digo de status 401 - n√£o autorizado. */
  if (!token) {
    return res.status(401).json({ error: 'Token n√£o encontrado' });
  }
  try {
    /* Atrav√©s o m√©todo verify, podemos validar e decodificar o nosso JWT. */
    const decoded = jwt.verify(token, segredo);
    /*
      A vari√°vel decoded ser√° um objeto equivalente ao seguinte:
      {
        data: {
          _id: '5e54590ba49448f7e5fa73c0',
          username: 'italssodj',
          password: 'senha123'
        },
        iat: 1582587327,
        exp: 1584774714908
      }
    */
    /* Caso o token esteja expirado, a pr√≥pria biblioteca ir√° retornar um erro,
       por isso n√£o √© necess√°rio fazer valida√ß√£o do tempo.
       Caso esteja tudo certo, n√≥s ent√£o buscamos o usu√°rio na base para obter seus dados atualizados */
    const user = await model.findUser(decoded.data.username);
    /* N√£o existe um usu√°rio na nossa base com o id informado no token. */
    if (!user) {
      return res
        .status(401)
        .json({ message: 'Erro ao procurar usu√°rio do token.' });
    }
    /* O usu√°rio existe! Colocamos ele em um campo no objeto req.
       Dessa forma, o usu√°rio estar√° dispon√≠vel para outros middlewares que
       executem em sequ√™ncia */
    req.user = user;
    /* Por fim, chamamos o pr√≥ximo middleware que, no nosso caso,
       √© a pr√≥pria callback da rota. */
    next();
  } catch (err) {
    return res.status(401).json({ message: err.message });
  }
};

// # No arquivo 'api/server.js', onde definimos as rotas, usamos esse middleware para adicionar autentica√ß√£o na nossa rota de listagem de posts.
// const express = require('express');
// const bodyParser = require('body-parser');
// const routes = require('./routes');

/* Aqui, importamos nossa fun√ß√£o que valida se o usu√°rio est√° ou n√£o autenticado */
const validateJWT = require('./auth/validateJWT');
// const port = process.env.PORT || 8080;
// const app = express();
// app.use(bodyParser.urlencoded({ extended: false }));
// app.use(bodyParser.json());
// const apiRoutes = express.Router();
/* E a usamos como middleware na nossa rota, colocando-a antes do nosso controller. */
   apiRoutes.get('/api/posts', validateJWT, routes.getPosts);
// apiRoutes.post('/api/users', routes.createUsers);
// apiRoutes.post('/api/login', routes.login);
// app.use(apiRoutes);
// app.listen(port);
// console.log('conectado na porta ' + port);

// # Note que n√£o queremos autenticar o login e nem cria√ß√£o de usu√°rios, pois precisamos deles para o processo de autentica√ß√£o! Se houvesse outras rotas protegidas na nossa aplica√ß√£o, usar√≠amos o middleware nelas tamb√©m!

// vamos mandar o token para a API via Headers , que s√£o informa√ß√µes extras que podemos passar em uma requisi√ß√£o.

// Adicionamos um header chamado Authorization porque √© o que nosso middleware espera. Se n√£o se lembra, d√™ uma olhada de novo no arquivo /api/auth/validateJWT.js .

// Lembra-se de que o middleware de autentica√ß√£o recupera o usu√°rio do banco de dados e o coloca no req ? Esse objeto √© o mesmo que √© passado para todos os middlewares e para a callback da rota. Como o middleware de autentica√ß√£o √© executado antes das fun√ß√µes dos controllers, req conter√° o usu√°rio logado quando o controller em /controllers/posts for executado, e poder√≠amos utiliz√°-lo para fazer uma consulta ao banco de dados que trouxesse somente seus posts. Para confirmar isso, basta colocar um console.log dentro do controller:
module.exports = (req, res, next) => {
  console.log(req.user);
  res.status(200).json({ mockPosts });
};
// # Voc√™ dever√° ver algo assim, no terminal onde executou a API:
{
  _id: 5ea2255783d4bc61173cd1e6,
  username: 'italssodj',
  password: 'senha123'
}

// ==============================
// -- > CONTE√öDO do dia - 28.1 -- <---/ FIM -----------------------------------------//
// ==============================
// -- > AULA ao VIVO - 28.1 ----- <---/ INICIO --------------------------------------//
// ==============================

//  Oque vamos aprender

// ==============================
// -- > AULA ao VIVO - 28.1 ----- <---/ FIM -----------------------------------------//
// ==============================
// -- > EXERC√çCIO do dia - 28.1 -- <---/ INICIO --------------------------------------//
// ==============================

// Agora a pr√°tica

// ==============================
// -- > EXERC√çCIO do dia - 28.1 -- <---/ FIM -----------------------------------------//
// ============================== NodeJS - JWT - (JSON Web Token)
// ...
