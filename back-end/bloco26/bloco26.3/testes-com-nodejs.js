// ============================== Testes com NodeJS
// -- > CONTE√öDO do dia - 26.3 -- <---/ INICIO --------------------------------------//
// ==============================

// Entender o que s√£o e para qu√™ servem testes automatizados.
// Escrever c√≥digos para NodeJS aplicando o conceito de TDD.
// Escrever testes utilizando ferramentas populares;
// Estruturar cen√°rios de testes de acordo com os requisitos;
// Criar mocks de fun√ß√µes para testes.

// ### Conte√∫do

// ### Testes n√£o s√£o de outro mundo!
// - √â comum executar o mesmo c√≥digo v√°rias e v√°rias vezes para ver se seu comportamento era o mesmo que esper√°vamos. Muitas vezes realizamos o mesmo teste alterando os dados de entrada (input) para garantir que a sa√≠da (output) era condizente com aquilo que foi codificado. E aposto que muitas das vezes o resultado n√£o era positivo: havia faltado um if, as vezes precisava de mais um par√¢metro ou at√© mesmo um retorno n√£o tratado como deveria.

// ### Por que testar?
// - Existem diversos tipos de testes, cada um com suas caracter√≠sticas e objetivos.

// exemplo pr√°tico, imagine que queremos criar uma fun√ß√£o que receba a m√©dia das notas de uma pessoa e responda se ela foi aprovada ou n√£o segundo a seguinte regra:
// # M√©dia  -  Situa√ß√£o
// # Menor  -  que 7	Reprovado
// # Igual  -  ou maior que 7	Aprovado

// O primeiro passo que precisamos dar √© pensar na estrutura da nossa fun√ß√£o:
// # Quantos e quais par√¢metros ela ir√° esperar?
// # Qual tipo de resposta ela ir√° retornar?

// examples/calculaSituacao.js
function calculaSituacao() {
  if (media > 7) {
    return 'aprovado';
  }
  return 'reprovado';
}

modulo.exports = calculaSituacao;

// precisamos garantir que:
// # Se passado um valor menor que 7, por exemplo 4, a resposta deve ser "reprovado";
// # Se passado um valor maior que 7, por exemplo 9, a resposta ser "aprovado";
// # E, n√£o podemos esquecer do "OU", sendo assim, se passado 7, a resposta deve ser "aprovado";

// Para validar esses cen√°rios que pensamos podemos escrever algumas chamadas a nossa fun√ß√£o:
// ./calculaSituacao.js

const calculaSituacao = require('./calculaSituacao');
console.log('Quando a m√©dia for menor que 7, retorna "reprovado":');

const respostaCenario1 = calculaSituacao(4);
if (respostaCenario1 === 'reprovado') {
  console.log(`Ok üöÄ`);
} else {
  console.error('Resposta n√£o esperada üö®');
}
// console:
// Quando a m√©dia for menor que 7, retorna "reprovado":
// Ok üöÄ

console.log('Quando a m√©dia for maior que 7, retorna "aprovado":');

const respostaCenario2 = calculaSituacao(9);
if (respostaCenario2 === 'aprovado') {
  console.log(`Ok üöÄ`);
} else {
  console.error('Resposta n√£o esperada üö®');
}
// console:
// Quando a m√©dia for maior que 7, retorna "aprovado":
// Ok üöÄ

console.log('Quando a m√©dia for igual a 7, retorna "aprovado":');

const respostaCenario3 = calculaSituacao(7);
if (respostaCenario3 === 'aprovado') {
  console.log(`Ok üöÄ`);
} else {
  console.error('Resposta n√£o esperada üö®');
}
// console:
// Quando a m√©dia for igual a 7, retorna "aprovado":
// Resposta n√£o esperada üö®

// ### Testes automatizados
// - J√° vimos algumas outras ferramentas desse tipo em conte√∫dos anteriores, como o Jest e o assert.
// - Para implementar testes no back-end iremos utilizar a dupla mocha e chai . Apesar de serem duas ferramentas diferentes, elas se completam.

// # Ferramentas
npm install -D mocha chai
// Feita a instala√ß√£o j√° podemos import√°-las em um arquivo .js e escrever nossos testes.

// ### Tipos de teste
// - importante ter em mente na hora de produzir √© o escopo e a intera√ß√£o dos testes

// # Testes unit√°rios: Trabalham presumindo um escopo limitado a um pequeno fragmento do seu c√≥digo com intera√ß√£o m√≠nima entre recursos externos. Ex: Uma fun√ß√£o com um fim espec√≠fico, como uma fun√ß√£o que soma dois n√∫meros:

// ./funcoes/calculo/soma.js
// Aqui podemos escrever testes pensando somente o comportamento esperado para fun√ß√£o `soma`
const soma = (valorA, valorB) => valorA + valorB;

module.exports = soma;

// # Testes de integra√ß√£o: Trabalham presumindo a jun√ß√£o de m√∫ltiplos escopos (que tecnicamente devem possuir, cada um, seus pr√≥prios testes) com intera√ß√µes entre eles. Ex: Uma fun√ß√£o de calculadora que usa fun√ß√µes menores que eu posso testar isoladamente/ de forma unit√°ria:

// ./funcoes/calculadora.js
// Aqui podemos escrever testes pensando o comportamento da fun√ß√£o `calculadora` que presume o bom comportamento das fun√ß√µes que integram ela: `soma`, `subtracao`, `multiplicacao`, `divisao`

const { soma, subtracao, multiplicacao, divisao } = require("./calculo");

const calculadora = (valorA, valorB, operacao) => {
  switch(operacao) {
    case "soma":
      soma(valorA, valorB);
      break;
    case "subtracao":
      subtracao(valorA, valorB);
      break;
    case "multiplicacao":
      multiplicacao(valorA, valorB);
      break;
    case "divisao":
      divisao(valorA, valorB);
      break;
    default:
      break;
  }
};

module.exports = calculadora;
// - Esse contexto fica mais evidente, quando temos opera√ß√µes mais complexas nos nossos testes, como opera√ß√µes que envolvem leitura de arquivos e consultas no banco de dados para composi√ß√£o de informa√ß√µes

// # Testes de Ponto-a-ponto: Chamados tamb√©m de Fim-a-fim (End-to-End; E2E), esses testes pressup√µe um fluxo de intera√ß√£o completo com a aplica√ß√£o, de um ponto a outro: Aqui, poder√≠amos pensar uma API que utiliza nossa calculadora (assim como diversas outras fun√ß√µes mais complexas)

// Um exemplo pr√°tico disso, s√£o os avaliadores de projetos de front-end: Eles pressup√µe que toda cadeia de recursos deva estar funcionando para correta renderiza√ß√£o das p√°ginas. O que √© avaliado com intera√ß√µes de um ponto a outra dessa aplica√ß√£o (Que s√£o os requisitos, na pr√°tica).

// ### Escrevendo testes
// - Para exemplificar o processo de escrita de c√≥digo vamos retomar o exemplo com a fun√ß√£o calculaSituacao , que vimos anteriormente.

// - O primeiro passo √© compreender, atrav√©s dos requisitos, a estrutura que desejamos ter e os comportamentos esperados.

// # Sobre a estrutura:
// - Nossa fun√ß√£o dever√° receber um par√¢metro "media";
// - Responder com "reprovado" ou "aprovado".

// # Sobre os comportamentos esperados:
// 1 - Se passado um valor menor que 7, por exemplo 4, a resposta deve ser "reprovado"; 
// 2 - Se passado um valor maior que 7, por exemplo 9, a resposta ser "aprovado";
// 3 - E, n√£o podemos esquecer do "OU", sendo assim, se passado 7, a resposta deve ser "aprovado";

// Estruturando testes com o Mocha
// - O mocha √© um framework de testes para JS, ele nos ajuda a arquitetar os testes, nos fornecendo a estrutura e interface para escrevermos os testes.

// O mocha nos fornece duas palavras reservadas o 'describe' e o 'it'.
// # 'describe' nos permite adicionar uma descri√ß√£o para um teste espec√≠fico ou um grupo de testes.
// # 'it' nos permite sinalizar exatamente o cen√°rio de teste que estamos testando naquele ponto.

// Relembrando os testes que escrevemos "na m√£o", o mocha substitui aqueles logs que utilizamos para descrever cada teste:
console.log('Quando a m√©dia for maior que 7, retorna "aprovado":');

// - como podemos fazer isso com a ajuda do mocha . Esse mesmo cen√°rio 1 , utilizando describe para descrever o cen√°rio ficaria assim:
describe('Quando a m√©dia for menor que 7', () => {
  //
});
// o describe aceita dois par√¢metros: o primeiro √© a descri√ß√£o e o segundo uma fun√ß√£o para executar o cen√°rio de teste.

// - Descrito nosso comportamento, vamos adicionar o que ser√° testado de fato. Para isso, temos o 'it':
describe('Quando a m√©dia for menor que 7', () => {
  it('retorna "reprovado"', () => {
    //
  });
});
// A sintaxe do it √© bem semelhante √† do describe : ela aceita uma string, qual o comportamento a ser testado, e uma fun√ß√£o que executa os testes de fato.

// ### Aferindo testes com o Chai
// - nos fornece maneiras de dizermos o que queremos testar e ent√£o ele validar√° se o resultado condiz com o esperado.

// - Para de fato testar nossa fun√ß√£o precisamos cham√°-la passando o input desejado e ent√£o validar se a resposta √© aquela que esperamos.
const respostaCenario1 = calculaSituacao(4);
if (respostaCenario1 === 'reprovado') {
  console.log(`Ok üöÄ`);
} else {
  console.error('Resposta n√£o esperada üö®');
}
// Essa valida√ß√£o √© o que chamamos de assertion , "asser√ß√£o" ou, em alguns casos, "afirma√ß√£o"

// Usaremos a interface expect do chai em nossos exemplos, que significa de fato o que √© esperado para determinada vari√°vel:
const resposta = calculaSituacao(4);

expect(resposta).equals('reprovado');
// estamos chamando nossa fun√ß√£o e, logo em seguida, afirmamos que seu retorno, armazenado na constante resposta , deve ser igual a ( equals ) 4.

// Vamos ver como fica nosso cen√°rio de teste inteiro com mocha + chai:

// # tests/calculaSituacao.js
const { expect } = require('chai');
const calculaSituacao = require('../examples/calculaSituacao');

describe('Quando a m√©dia for menor que 7', () => {
  it('retorna "reprovado"', () => {
    const resposta = calculaSituacao(4);

    expect(resposta).equals('reprovado');
  });
});

// - Para tornar nosso teste ainda mais leg√≠vel e elegante, o chai nos fornece outros getters encade√°veis que possuem um papel puramente est√©tico. Por exemplo o 'to' e o 'be', que nos permite escrever nossa assertion da seguinte maneira:

// # tests/calculaSituacao.js
const { expect } = require('chai');
const calculaSituacao = require('../examples/calculaSituacao');

describe('Quando a m√©dia for menor que 7', () => {
  it('retorna "reprovado"', () => {
    const resposta = calculaSituacao(4);

    expect(resposta).to.be.equals('reprovado');
  });
});

// ### Executando o teste
// - precisamos criar nosso pacote node para incluirmos os scripts necess√°rios em package.json

// # npm init

// Teste escrito, vamos ver como execut√°-lo.

// mocha √© o respons√°vel por executar nossos testes.

// vamos adicionar um novo script ao nosso package.json , que chama o mocha e informa um arquivo ou diret√≥rio de testes:
// package.json
{
  // ...
    "scripts": {
      "start": "node index.js",
      "test": "mocha tests"
    },
  // ...
  }
// Dessa forma, n√£o precisamos instalar nada globalmente, e para executar nosso teste basta rodar em nosso terminal o script test, que ir√° executar o comando mocha tests utilizando o m√≥dulo instalado:

npm run test
// Ou simplesmente
npm test

// ### Testando todos os cen√°rios

// # tests/calculaSituacao.js
const { expect } = require('chai');

const calculaSituacao = require('../examples/calculaSituacao');

describe('Quando a m√©dia for menor que 7', () => {
  it('retorna "reprovado"', () => {
    const resposta = calculaSituacao(4);

    expect(resposta).to.be.equals('reprovado');
  });
});

describe('Quando a m√©dia for maior que 7', () => {
  it('retorna "aprovado"', () => {
    const resposta = calculaSituacao(9);

    expect(resposta).to.be.equals('aprovado');
  });
});

describe('Quando a m√©dia for igual a 7', () => {
  it('retorna "aprovado"', () => {
    const resposta = calculaSituacao(7);

    expect(resposta).to.be.equals('aprovado');
  });
});

// ### TDD - Transformando requisitos em testes
// - (Test Driven Development), tradu√ß√£o, Desenvolvimento Orientado a Testes. Esse metodologia √© bastante difundida e pode trazer muitos benef√≠cios para o desenvolvimento.

// A pr√°tica do TDD em come√ßar a escrever os testes que traduzem e validam os comportamentos esperados para aquele c√≥digo antes de come√ßar a implementa√ß√£o.
// - 1¬∞ precisamos interpretar os requisitos, pensando nos comportamentos que iremos implementar e na estrutura do c√≥digo: se ser√° uma fun√ß√£o, um m√≥dulo, quais os inputs, os outputs, etc..
// - Tendo isso em mente, come√ßamos a escrever os testes, criamos a estrutura de describes e its que vimos.
// - Depois, escrevemos as asser√ß√µes. Perceba que antes mesmo de ter qualquer c√≥digo, j√° iremos criar chamadas a esse c√≥digo, o que significa que nossos testes ir√£o falhar. N√£o se preocupe, pois essa √© exatamente a ideia nesse momento.
// - Agora que j√° temos os testes criados, vamos a implementa√ß√£o do nosso c√≥digo. A ideia √© escrever os c√≥digos pensando nos testes e, conforme vamos cobrindo os cen√°rios, nossos testes que antes quebravam come√ßam a passar.

// ### Um pouco mais de testes
// - Escreveremos uma fun√ß√£o que l√™ o conte√∫do de um arquivo. Essa fun√ß√£o:

// - Receber√° um par√¢metro com o nome do arquivo a ser lido. Esse arquivo dever√° estar na pasta io-files ;
// - Caso o arquivo solicitado exista, responder√° uma string com o conte√∫do do arquivo;
// - Caso o arquivo solicitado n√£o exista, dever√° responder null .

// # vamos criar um novo diret√≥rio raiz para receber o nosso pacote node e instalar nossas ferramentas de testes:

// mkdir examples2
// cd examples2

// # Criando e entrando no diret√≥rio do nosso projeto
// mkdir io-test && cd io-test

// # Iniciando o npm
// npm init 

// # Instalando as ferramentas de testes
// npm install --save-dev mocha chai

// - Agora basta adicionar o seguinte script em seu package.json:
// # io-test/package.json
{
  //
  "scripts": {
    "start": "node index.js",
    "test": "mocha test.js"
  },
  //
}

// ### Mocha
// Come√ßaremos estruturando os requisitos em forma de testes com o mocha:

// # io-test/test.js
describe('leArquivo', () => {
  describe('Quando o arquivo existe', () => {
    describe('a resposta', () => {
      it('√© uma string', () => {
        //
      });

      it('√© igual ao conte√∫do do arquivo', () => {
        //
      });
    });
  });

  describe('Quando o arquivo n√£o existe', () => {
    describe('a resposta', () => {
      it('√© igual a "null"', () => {
        //
      });
    });
  });
});

// ### Chai
// Em seguida vamos adicionar as asser√ß√µes com o chai:

// # io-test/test.js
const { expect } = require('chai');
const leArquivo = require('./leArquivo');
const CONTEUDO_DO_ARQUIVO = 'VQV com TDD';

describe('leArquivo', () => {
  describe('Quando o arquivo existe', () => {
    describe('a resposta', () => {
      const resposta = leArquivo('arquivo.txt');

      it('√© uma string', () => {
        expect(resposta).to.be.a('string');
      });

      it('√© igual ao conte√∫do do arquivo', () => {
        expect(resposta).to.be.equals(CONTEUDO_DO_ARQUIVO);
      });
    });
  });

  describe('Quando o arquivo n√£o existe', () => {
    it('a resposta √© igual a "null"', () => {
      const resposta = leArquivo('arquivo_que_nao_existe.txt');

      expect(resposta).to.be.equal(null);
    });
  });
});
// Aqui utilizamos uma nova asser√ß√£o do chai, o 'a', que validar√° o "tipo" daquele retorno. "espera a resposta ser uma string" (ou expect response to be a string).

// precisamos criar o arquivo que ir√° conter a fun√ß√£o. Vamos come√ßar com uma fun√ß√£o vazia apenas para conseguir import√°-la no arquivo de teste:

// # io-test/leArquivo.js
module.exports = () => {
  //
}

// Agora vamos rodar o teste e ver o resultado:
// # npm test ou npm run test
> io-test@1.0.0 test
> mocha test.js

leArquivo
  Quando o arquivo existe
    a resposta
      1) √© uma string
      2) √© igual ao conte√∫do do arquivo
  Quando o arquivo n√£o existe
    3) a resposta √© igual a "null"

0 passing (149ms)
3 failing

1) leArquivo
      Quando o arquivo existe
        a resposta
          √© uma string:
    AssertionError: expected undefined to be a string
    at Context.<anonymous> (test.js:11:32)                  
    at processImmediate (internal/timers.js:461:21)         
                                                            
2) leArquivo
      Quando o arquivo existe
        a resposta
          √© igual ao conte√∫do do arquivo:
    AssertionError: expected undefined to equal 'VQV com TDD'
    at Context.<anonymous> (test.js:15:32)                  
    at processImmediate (internal/timers.js:461:21)         
                                                            
3) leArquivo
      Quando o arquivo n√£o existe
        a resposta √© igual a "null":
    AssertionError: expected undefined to equal null
    at Context.<anonymous> (test.js:24:30)                  
    at processImmediate (internal/timers.js:461:21)

// ### Implementa√ß√£o

// # io-test/leArquivo.js
const fs = require('fs');

function leArquivo(nomeDoArquivo) {
  try {
    const conteudoDoArquivo = fs.readFileSync(nomeDoArquivo, 'utf8');

    return conteudoDoArquivo;
  } catch (err) {
    return null;
  }
}

module.exports = leArquivo;

// Ap√≥s a implementa√ß√£o desse c√≥digo um dos testes j√° passa ser executado com sucesso:
> io-test@1.0.0 test
> mocha test.js

leArquivo
  Quando o arquivo existe
    a resposta
      1) √© uma string
      2) √© igual ao conte√∫do do arquivo
  Quando o arquivo n√£o existe
    ‚úî a resposta √© igual a "null"


1 passing (13ms)
2 failing

// ### Isolando nossos testes
// ossos testes n√£o devem realizar opera√ß√µes de IO ( input / output ), ou seja, n√£o devem acessar nem o disco, nem a rede.

// - frontend, estamos na maior parte do tempo, manipulando o DOM.
// - javascript no backend com NodeJS, constantemente estamos realizando opera√ß√µes com IO
// nossa aplica√ß√£o se comunica com o sistema de arquivos ou com a rede.

// para garantir nossos cen√°rios, precisar√≠amos, al√©m de criar o teste e realizar a chamada √† nossa fun√ß√£o leArquivo , preparar um arquivo para ser lido com o conte√∫do que esperamos ler.

// Dessa forma, o ideal √© n√£o permitir que nosso c√≥digo realize essas opera√ß√µes de IO de fato, mas apenas simular que elas est√£o sendo realizadas. Dessa forma, isolamos o IO de nossos testes

// 'Test Doubles', s√£o objetos que fingem ser o outro objeto para fins de testes.
// Para nos ajudar com esse tipo de coisa, usaremos uma ferramenta chamada 'sinon'

// ### Sinon
// - ferramenta que fornece fun√ß√µes para diversos tipos dos Test Doubles ou, numa tradu√ß√£o livre, Dubl√™s de Testes.

// # Stubs
// - s√£o objetos que podemos utilizar para simular intera√ß√µes com depend√™ncias externas ao que estamos testando de fato.

// instala√ß√£o do Sinon:
// # npm install --save-dev sinon

// Agora vamos ver na pr√°tica como podemos criar um stub para a fun√ß√£o de leitura do fs:
const fs = require('fs');
const sinon = require('sinon');

sinon.stub(fs, 'readFileSync')
  .returns('Valor a ser retornado');
// Precisamos importar o m√≥dulo 'fs' e, ent√£o, falamos para o sinon criar um stub para a fun√ß√£o readFileSync que retornar√° 'Valor a ser retornado', conforme especificamos na chamada para returns.

// ### Stub

// # io-test/test.js
const fs = require('fs');
const sinon = require('sinon');
const { expect } = require('chai');

const leArquivo = require('./leArquivo');

const CONTEUDO_DO_ARQUIVO = 'VQV com TDD';

sinon.stub(fs, 'readFileSync').returns(CONTEUDO_DO_ARQUIVO);

describe('leArquivo', () => {
  describe('Quando o arquivo existe', () => {
    describe('a resposta', () => {
      const resposta = leArquivo('arquivo.txt');

      it('√© uma string', () => {
        expect(resposta).to.be.a('string');
      });

      it('√© igual ao conte√∫do do arquivo', () => {
        expect(resposta).to.be.equals(CONTEUDO_DO_ARQUIVO);
      });
    });
  });

  describe('Quando o arquivo n√£o existe', () => {
    it('a resposta √© igual a "null"', () => {
      const resposta = leArquivo('arquivo_que_nao_existe.txt');

      expect(resposta).to.be.equal(null);
    });
  });
});
// ao rodar esse teste teremos o seguinte resultado:
npm run test                

> io-test@1.0.0 test
> mocha test.js

leArquivo
  Quando o arquivo existe
    a resposta
      ‚úî √© uma string
      ‚úî √© igual ao conte√∫do do arquivo
  Quando o arquivo n√£o existe
    1) a resposta √© igual a "null"

2 passing (13ms)
1 failing

1) leArquivo
      Quando o arquivo n√£o existe
        a resposta √© igual a "null":
    AssertionError: expected 'VQV com TDD' to equal null
    at Context.<anonymous> (test.js:28:30)                  
    at processImmediate (internal/timers.js:461:21)         
// Perceba que os testes que esperavam o valor retornados pelo stub funcionaram. Por√©m, onde o valor esperado era outro, o teste passou a quebrar.
// Isso aconteceu porque criamos um comportamento falso √∫nico para a fun√ß√£o, que √© aplicado para todos os testes.

// - Quando o arquivo passado existe √© esperado que ela retorne o valor;
// - Quando o arquivo passado n√£o existe √© esperado um erro;

// o ideal √© sempre criarmos Tests Doubles para o escopo de cada cen√°rio de teste.

// - O mocha nos fornece duas fun√ß√µes chamadas 'before e after'. s√£o fun√ß√µes que ser√£o executadas "antes" e "depois" daquele "bloco" de testes.
// Vamos adicionar esse conceito ao nosso teste:
const fs = require('fs');
const sinon = require('sinon');
const { expect } = require('chai');

const leArquivo = require('./leArquivo');

const CONTEUDO_DO_ARQUIVO = 'VQV com TDD';

describe('leArquivo', () => {
  describe('Quando o arquivo existe', () => {
    before(() => {
      sinon.stub(fs, 'readFileSync').returns(CONTEUDO_DO_ARQUIVO);
    });

    after(() => {
      fs.readFileSync.restore();
    });

    describe('a resposta', () => {
      it('√© uma string', () => {
        const resposta = leArquivo('arquivo.txt');

        expect(resposta).to.be.a('string');
      });

      it('√© igual ao conte√∫do do arquivo', () => {
        const resposta = leArquivo('arquivo.txt');

        expect(resposta).to.be.equals(CONTEUDO_DO_ARQUIVO);
      });
    });
  });

  describe('Quando o arquivo n√£o existe', () => {
    before(() => {
      sinon
        .stub(fs, 'readFileSync')
        .throws(new Error('Arquivo n√£o encontrado'));
    });

    after(() => {
      fs.readFileSync.restore();
    });

    describe('a resposta', () => {
      it('√© igual a "null"', () => {
        const resposta = leArquivo('arquivo_que_nao_existe.txt');

        expect(resposta).to.be.equal(null);
      });
    });
  });
});
// antes de cada cen√°rio de teste n√≥s alteramos o comportamento do m√©todo do 'fs' criando um 'stub' e, depois da execu√ß√£o do teste, utilizamos a fun√ß√£o 'restore()' que o sinon atribui aos stubs para retornarmos o comportamento padr√£o daquela fun√ß√£o.
// Ao rodar nosso teste agora.
npm run test                                          1 ‚®Ø

> io-test@1.0.0 test
> mocha test.js

leArquivo
  Quando o arquivo existe
    a resposta
      ‚úî √© uma string
      ‚úî √© igual ao conte√∫do do arquivo
  Quando o arquivo n√£o existe
    a resposta
      ‚úî √© igual a "null"

3 passing (39ms)

// ==============================
// -- > CONTE√öDO do dia - 26.3 -- <---/ FIM -----------------------------------------//
// ==============================
// -- > AULA ao VIVO - 26.3 ----- <---/ INICIO --------------------------------------//
// ==============================

 
 
// ==============================
// -- > AULA ao VIVO - 26.3 ----- <---/ FIM -----------------------------------------//
// ==============================
// -- > EXERC√çCIO do dia - 26.3 -- <---/ INICIO --------------------------------------//
// ==============================

// Agora a pr√°tica

// Exerc√≠cio 1: Estruture os testes utilizando mocha e chai para um fun√ß√£o que ir√° dizer se um n√∫mero √© "positivo", "negativo" ou "neutro":
// # Essa fun√ß√£o ir√° receber um n√∫mero como par√¢metro e retornar uma string como resposta;
// # Quando o n√∫mero passado for maior que 0 dever√° retornar "positivo", quando for menor que 0 dever√° retornar "negativo" e quando igual a 0 dever√° retornar "neutro";
// # Descreva todos os cen√°rio de teste utilizando describes;
// # Descreva todos os testes que ser√£o feitos utilizando its;
// # Crie as asser√ß√µes validando se os retornos de cada cen√°rio tem o tipo e o valor esperado.

// - resolu√ß√£o:
// # exercicio/test. 
// # npm init
// # npm install -D mocha chai
// # npm install --save-dev sinon
/*
// package.json
{
  // ...
    "scripts": {
      "start": "node index.js",
      "test": "mocha test.js"
    },
  // ...
  }
*/ 
const { expect } = require('chai');
const numerosNaturais = require('./positivoNegativoNeutro');

describe('Executa a fun√ß√ß√£o numerosNaturais', () => {
  describe('Quando o n√∫mero for maior que 0', () => {
    describe('A resposta', () => {
      it('√© uma ""string', () => {
        const resposta = numerosNaturais(10);
        expect(resposta).to.be.a('string');
      });

      it('√© igual a "positivo"', () => {
        const resposta = numerosNaturais(10);
        expect(resposta).to.be.equals('positivo');
      });
    });
  });
  
  describe('Quando o n√∫mero for menor que 0', () => {
    describe('a resposta', () => {
    it('√© uma "string"', () => {
      const resposta = numerosNaturais(-10);
      expect(resposta).to.be.a('string');
    });
    
    it('√© igual a "negativo"', () => {
      const resposta = numerosNaturais(-10);
      expect(resposta).to.be.equals('negativo');
    });
    });
  });

  describe('Quando o n√∫mero for igual a 0', () => {
    describe('a resposta', () => {
      it('√© uma "string"', () => {
        const resposta = numerosNaturais(0);
        expect(resposta).to.be.a('string');
      });
      
      it('√© igual a "neutro"', () => {
        const resposta = numerosNaturais(0);
        expect(resposta).to.be.equals('neutro');
      });
    });
  });
});

// Exerc√≠cio 2: Implemente a fun√ß√£o apresentada no exerc√≠cio 1, garantindo que ela ir√° passar em todos os testes que voc√™ escreveu.

// - resolu√ß√£o
module.export = (numero) => {
  if (numero > 0) {
    return 'positivo';
  }
  if (numero < 0) {
    return 'negativo';
  }
  return 'neutro';
};

// Exerc√≠cio 3: Adicione √† fun√ß√£o um tratamento para casos em que o par√¢metro informado n√£o seja do tipo Number .
// # Adicione o cen√°rio em seu arquivo de testes, passando um valor de tipo diferente a Number para a fun√ß√£o;
// # Adicione uma asser√ß√£o para esperar que o valor retornado para esse caso seja igual uma string "o valor deve ser um n√∫mero";
// # Implemente em sua fun√ß√£o tal valida√ß√£o para que o teste passe.

// - resolu√ß√£o
// test.js
describe('Quando o par√¢metro passado n√£o √© n√∫mero', () => {
  describe('a resposta', () => {
    it('√© uma "string"', () => {
      const resposta = numerosNaturais('Texto');
      expect(resposta).to.be.a('string');
    });

    it('√© igual a "o par√¢metro deve ser n√∫mero"', () => {
      const resposta = numerosNaturais('Texto');
      expect(resposta).to.be.equals('opar√¢metro deve ser n√∫mero');
    });
  });
});
// positivoNegativoNeutro.js
module.export = (numero) => {
  if (typeof numero !== 'number') {
    return 'o par√¢metro deve ser um n√∫mero';
  }
  if (numero > 0) {
    return 'positivo';
  }
  if (numero < 0) {
    return 'negativo';
  }
  return 'neutro';
};

// Exerc√≠cio 4: Crie testes para uma fun√ß√£o que escrever√° um conte√∫do em um arquivo espec√≠fico.
// # Essa fun√ß√£o dever√° receber dois par√¢metros: o nome do arquivo e o conte√∫do desse arquivo.
// # Ap√≥s concluir a escrita do arquivo ela dever√° retornar um ok.
// # Descreva todos os cen√°rios de teste utilizando describes;
// # Descreva todos os testes que ser√£o feitos utilizando its;
// # Crie as asser√ß√µes validando se o retorno da fun√ß√£o possui o valor e tipo esperado.

// - resolu√ß√£o
const fs = require('fs');
const { expect } = require('chai');
const escrevaArquivo = require('./escrevaArquivo');

describe('Executa a fun√ß√£o  escrevaArquivo', () => {
  describe('a resposta', () => {
    it('√© uma "string"', () => {
      const resposta = escrevaArquivo('arquivo.txt', '#vqv conte√∫do');
      expect(resposta).to.be.a('string');
    });

    it('√© igual a "ok"', () => {
      const resposta = escrevaArquivo('arquivo.txt', '#vqv conte√∫do');
      expect(resposta).to.be.equals('ok');
    });
  });
});

// Exerc√≠cio 5: Implemente a fun√ß√£o descrita no exerc√≠cio 4.
// # Crie a fun√ß√£o descrita no exerc√≠cio 4 utilizando o m√≥dulo fs do node.
// # Adapte os testes adicionando stub ao m√≥dulo utilizado do fs, isolando assim o teste.
// # Garanta que todos os testes escritos no exerc√≠cio 4 ir√£o passar com sucesso.

// - resolu√ß√£o


// ==============================
// -- > EXERC√çCIO do dia - 26.3 -- <---/ FIM -----------------------------------------//
// ============================== Node.js - Fluxo Ass√≠ncrono
// ...