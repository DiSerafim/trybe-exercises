// Fundamentos do Desenvolvimento Web

// Bloco 02:
// Git, GitHub e Internet
// Os principais pontos abordados ser√£o:

// O que √© o Git?
# Git, um sistema de controle de vers√£o distribu√≠do (DVCS) que permite que um time trabalhe em um mesmo projeto ou em um mesmo arquivo e prov√™ ferramentas para contornar a maioria dos problemas que podemos ter nesse tipo de situa√ß√£o.

// Qual a principal diferen√ßa para os outros VCS's?
# O melhor, se n√£o um dos melhores sistemas de gest√£o de gerenciamento de vers√£o de sistemas.
# Pode serusado localmente.
# podemos versionar fotos, textos e c√≥digos.

// Como configurar o Git na sua m√°quina?
# Sudo apt-get update
# Sudo apt-get install git.

// Como iniciar um reposit√≥rio local?
# Antes de criar o reposit√≥rio voc√™ deve criar um pasta para ele.
# git init

// O que √© o GitHub ?
# Uma plataforma de hospedagem de c√≥digo-fonte com controle de vers√£o usando o Git.

// Como subir seu reposit√≥rio local para o GitHub?
# √â necess√°rio estabelecer uma ponte entre o Git ( local ) e o GitHub ( remoto ), e sobretudo que essa ponte seja segura .
# SSH ou Secure Shell : √© um protocolo de criptografia de rede que serve para transferir dados de forma segura mesmo em redes inseguras. Usando o protocolo SSH, voc√™ pode se conectar ao GitHub sem precisar digitar seu nome e chave de acesso pessoal a cada comando executado.

// O que √© Branch , Merge , Commit ?
# Branch - √© o local onde fazemos altera√ß√µes no nosso c√≥digo, √© uma c√≥pia identica do nosso arquivo principal (main).
# Merge - √© quando faz a fus√£o das branchs com a branch master.
# Commit - comitar, descrever coment√°rios sobre altera√ß√µes feitas.

# Exerc√≠cios QUIZ

1 - Qual a principal fun√ß√£o de um sistema de controle de vers√£o? *
 # Ajudar no gerenciamento de vers√µes de documentos, programas de computador, etc...

2 - Quais os tipos de sistemas de controle de vers√£o e quais as suas principais caracter√≠sticas? *
 # Distribu√≠dos ou n√£o

3 - Para que serve o comando PULL? *
 # Puxar as altera√ß√µes de um reposit√≥rio remoto no local

4 - Por que voc√™ faria uma BRANCH do c√≥digo?
 # Alterar o c√≥digo sem correr o risco de invalidar o c√≥digo que est√° no ar e organizar melhor o mesmo.

5 - O que acontece quando voc√™ faz um MERGE?
 # Agrega as altera√ß√µes de uma branch na outra.

6 - O que acontece quando voc√™ faz um PUSH?
 # Empurra as altera√ß√µes do reposit√≥rio local no remoto


// Parte 1 - Instala√ß√£o e configura√ß√£o
// Instala√ß√£o

Para instalar o Git abra o seu terminal e digite o seguinte comando:
sudo apt-get install git-all


// Configura√ß√£o
O Git vem com uma ferramenta chamada git config que permite ver e atribuir vari√°veis de configura√ß√£o que controlam todos os aspectos de como o Git aparece e opera.

// Identidade
O primeiro passo √© configurar sua identidade, seu nome e endere√ßo de e-mail, isso √© importante pois cada commit usa esta informa√ß√£o, e ela √© carimbada de forma imut√°vel nos commits que voc√™ criar. Para configurar isso digite o comando abaixo em seu terminal:
OBS: √â preciso que o e-mail informado seja o mesmo que voc√™ utilizar√° para criar a sua conta no GitHub.
# git config --global user.name "Seu nome"
# git config --global user.email seuemail@exemplo.br

// Editor
Um outro ponto legal de se configurar √© o editor onde voc√™ poder√° abrir o arquivo de configura√ß√£o do Git , .gitconfig , fica f√°cil de voc√™ visualizar as configura√ß√µes do Git e tamb√©m adicionar outras que julgue necess√°rio. Para isso execute o comando √† seguir no seu terminal:
# git config --global core.editor "code --wait"

- Esse comando define o editor do .gitconfig como o VS Code , que √© o editor que voc√™ usar√° ao longo curso.

// Verificando a instala√ß√£o e a configura√ß√£o
No terminal:
# git --version
- git version 2.30.2

# git config --list
- user.email=seuemail@gmail.com
- user.name=seunome


// Parte 2 - Criar conta no GitHub
Crie sua conta no GitHub usando seu e-mail pessoal üêô
https://github.com/join


// Parte 3 - Adicionando uma chave SSH na sua conta do GitHub


// Gerando uma chave SSH
- Abra seu terminal e digite o comando abaixo. Ele cria uma nova chave SSH, usando o seu email como r√≥tulo.
√â preciso que o e-mail informado seja o mesmo que voc√™ utilizou para criar a sua conta no GitHub
# ssh-keygen -t rsa -b 4096 -C "seuemail@gmail.com"

- Durante o processo ir√° aparecer escrito no terminal Enter a file in which to save the key , quando isso acontecer pressione Enter para aceitar a localiza√ß√£o padr√£o /home/you/.ssh/id_rsa .
# Enter a file in which to save the key (/home/you/.ssh/id_rsa): [Press enter]

- Agora voc√™ deve digitar uma senha segura. obs: Ela √© invisivel.
# Enter passphrase (empty for no passphrase): [Type a passphrase]
# Enter same passphrase again: [Type passphrase again]

// Adicionando sua chave SSH ao ssh-agent
Primeiro voc√™ deve iniciar o ssh-agent em background:
# eval "$(ssh-agent -s)"

- Agora voc√™ deve adicionar sua chave privada SSH ao ssh-agent . Para isso execute o comando abaixo no terminal:
# ssh-add ~/.ssh/id_rsa


// Adicionando a chave SSH na sua conta do GitHub
- Antes de tudo voc√™ deve copiar a sua chave SSH. Para isso, voc√™ vai aprender um comando bem √∫til, mas que nem sempre vem instalado nativamente no Linux: o xclip.
- precisaremos instal√°-lo usando o comando a seguir:
# sudo apt-get install xclip

- Agora utilize o comando abaixo para copiar o conte√∫do da sua chave id_rsa.pub
- Para garantir que o conte√∫do foi copiado d√™ Ctrl + V em um editor de texto
# xclip -sel clip < ~/.ssh/id_rsa.pub

- Caso o xclip n√£o funcione, execute o comando abaixo e copie manualmente a sa√≠da do terminal.
# cat ~/.ssh/id_rsa.pub

// Entre no seu GitHub e siga os passos abaixo:
- No canto superior direito do GitHub , clique na sua foto de perfil e clique em Settings ;
- Na barra lateral esquerda, clique em SSH and GPG keys ;
- Clique em New SSH key ou Add SSH key ;
- No campo T√≠tulo , adicione um descri√ß√£o para a nova chave;
- Cole sua chave dentro do campo Key ;
- Clique em Add SSH key ;
- Caso seja solicitado, confirme sua senha do Github.
- Se tiver problemas ao seguir o tutorial acima, consulte a documenta√ß√£o oficial do GitHub .
# https://help.github.com/en/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account

// Parte 4 - Do git init ao git push
Agora voc√™ vai aprender a iniciar um reposit√≥rio Git, fazer seu primeiro commit e subi-lo para um reposit√≥rio no GitHub.

// Criando um reposit√≥rio local
Antes de se criar um reposit√≥rio √© preciso criar uma pasta para ele. Para isso voc√™ deve utilizar o comando mkdir, como vimos anteriormente, e ent√£o navegar para a pasta criada com o comando cd.
# git init

- Para verificar se um reposit√≥rio Git foi de fato iniciado, voc√™ pode executar o comando git status, que retorna o status do reposit√≥rio.
# No ramo master
# No commits yet
# nada para enviar (crie/copie arquivos e use "git add" para registrar)

- Adicionando e comitando
Considere que voc√™ j√° criou alguns arquivos e fez algumas modifica√ß√µes. Para que possamos versionar altera√ß√µes feitas no c√≥digo √© preciso sempre seguir a seguinte sequ√™ncia:
Adicionar ( add )
Comitar ( commit -m "mensagem" )
Os comandos ficam da seguinte forma:

- Adicionar todos os arquivos modificados
# git add .
- Voc√™ tamb√©m pode adicionar arquivos espec√≠ficos
# git add meu_arquivo.js

- Ent√£o voc√™ comita a altera√ß√£o
# git commit -m "Mensagem sobre a altera√ß√£o feita"

// Criando um reposit√≥rio no GitHub
- Para isso acesse o GitHub e procure o √≠cone com um sinal + na barra superior e ao clicar nele busca pela op√ß√£o New repository.
- Voc√™ deve ent√£o adicionar um nome ao seu reposit√≥rio, como por exemplo meu-super-repo . Ap√≥s fazer isso o bot√£o Create repository ser√° habilitado e ao clicar nele seu reposit√≥rio ser√° criado.
- Por enquanto ignore as outras op√ß√µes, a medida que for avan√ßando no curso voc√™ aprender√° mais sobre elas! Como seu reposit√≥rio estar√° vazio, o GitHub lhe dar√° algumas dicas.
- Voc√™ dever√° clicar no bot√£o SSH e ent√£o copiar a URL gerada. Voc√™ ir√° precisar dela para realizar a conex√£o entre seu reposit√≥rio local e seu reposit√≥rio remoto.

// Conectando o reposit√≥rio local com o remoto
Para conectar os dois reposit√≥rios voc√™ dever√° abrir o seu terminal, acessar o diret√≥rio do seu reposit√≥rio e ent√£o executar o seguinte comando:
# git remote add origin git@github.com:user-github/repo-name.git

- Sendo origin um apelido para o seu reposit√≥rio, poderia ser qualquer outro. E no lugar da URL git@github.com:user-github/repo-name.git deve ir a gerada pelo seu reposit√≥rio.
- Para verificar que tudo funcionou corretamente, execute o comando.
# git remote -v
- voc√™ obter√° um resultado semelhante a esse:
# origin  git@github.com:user-github/repo-name.git (fetch)
# origin  git@github.com:user-github/repo-name.git (push)

// Sincronizando os reposit√≥rios
Os reposit√≥rios j√° est√£o criados e tamb√©m j√° est√£o conectados, agora √© a hora de enviar as altera√ß√µes feitas no reposit√≥rio local para o reposit√≥rio remote.
Para isso, certifique-se que as altera√ß√µes j√° foram adicionadas e comitadas e ent√£o execute o seguinte comando:
# git push origin master

- Com isso, voc√™ est√° enviando as altera√ß√µes feitas localmente para o a branch principal, master, do seu reposit√≥rio remoto, origin.

// Parte 5 - O seu reposit√≥rio no GitHub
Pronto! Agora que voc√™ j√° √© capaz de gerenciar localmente seus c√≥digos e tamb√©m envi√°-los para o GitHub, √© hora de colocar a casa em ordem!
Antes de come√ßar, crie uma pasta com o nome trybe-exercises para manter todos os exerc√≠cios que desenvolver√° ao longo do curso. J√° dentro dessa pasta, crie uma outra pasta com o nome exercises e dentro dela uma √∫ltima pasta com o nome 2.1 . Seu caminho deve ficar algo como:
# .../trybe-exercises/exercises/2.1
