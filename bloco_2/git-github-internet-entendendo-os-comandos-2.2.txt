// Fundamentos do Desenvolvimento Web

// Bloco 02:
// Git, GitHub e Internet
// Oque √© e para que serve

// Voc√™ ser√° capaz de:
- Copiar um reposit√≥rio j√° existente no GitHub para o seu computador;
- Abrir Pull Requests e realizar Code Reviews ;
- Trabalhar em um mesmo projeto, com mais de uma pessoa, de forma ass√≠ncrona e distribu√≠da.

# Somente colocando em pr√°tica diariamente os conceitos do Git voc√™ conseguir√° se aperfei√ßoar no uso de reposit√≥rios e do versionamento de c√≥digo! ‚úåÔ∏è üí™ 

// Parte 1 - Baixando reposit√≥rios com o git clone
- Caso voc√™ queira copiar um reposit√≥rio Git j√° existente ‚Äî por exemplo, um projeto em que voc√™ queira contribuir ‚Äî, o comando necess√°rio √©:
# git clone urlDoSeuReposit√≥rioTrybeExercises

- Normalmente, ao participar dos projetos da Trybe , voc√™ ir√° precisar desse comando para conseguir baixar o reposit√≥rio que j√° est√° configurado e poder focar apenas nos requisitos do projeto.

// Parte 2 - Do git log ao Pull Request
// 2.1 - git log
Atrav√©s do log √© possivel ver todos os commits

// Pull Request
A vantagem de se realizar o Pull Request √© que voc√™ garante que o branch-padr√£o ter√° todo seu trabalho conclu√≠do e aprovado, realizando todas as novas altera√ß√µes em uma branch separada.

Para criar um pull request que est√° pronto para revis√£o, clique em Criar Pull Request. Para criar um rascunho de pull request, use o menu suspenso e selecione Criar rascunho de pull request e, em seguida, clique em Rascunho de Pull Request.

Voc√™ tamb√©m pode criar o pull request, ap√≥s fazer o git push na sua m√°quina local. Aparecendo logo ap√≥s o push o bot√£o Comparar e Pull Request:

// 2.2 - Git remove

Usado para remover e resuscitar arquivos
Primeiro crie uma pasta para clonar seu reposit√≥rio github e d√™ um git init dentro dela
# git init
Agora clone seu reposit√≥rio dentro da pasta
# git clone git@github.com:DiSerafim/Serafim.git
Agora √© s√≥ selecionar o arquivo que voc√™ quer excluir
# git rm + arquivo que voc√™ quer excluir
fa√ßa a verifica√ß√£o
# git status
Olhe em sua pasta se o arquivo exclu√≠do est√° l√°
# ls
adicione as modifica√ß√µes feitas
# git add .
Agora comitar
# git commit -m "Avise qual arquivo foi exclu√≠do"
Agora envie para o seu github
# git push

// git remove / vamos recuperar um arquivo exclu√≠do
Primeiro identifique o arquivo que voc√™ quer recuperar. Pode ser identificado pelo seu commit "frase descri√ß√£o"
# git log
Atrav√©s do log √© possivel ver todos os commits
Comando para abrir os arquivos deletados
# git log --diff-filter=D --summary
Agora copie os 4 primeiros digitos ap√≥s 'commit'
# 4442
Agora vamos recuperar nosso arquivo deletado
# git checkout 4442~1 + nome exato do arquivo + extens√£o
Pronto agora verifique sua pasta
# ls
Verifique o status do arquivo
# git status
Vamos adiconar o arquivo que havia sido exclu√≠do
# git add .
Agora √© s√≥ comitar
# git commit -m "nome do arquivo, foi recuperado"
Agora voc√™ pode subir seus arquivos
# git push

// 2.3 - git ignore
Ignora arquivos que voc√™ n√£o quer adicionar
Primeiro crie o arquivo .gitignore
# touch .gitignore
Use o ls -la para vizualizar, pois o .gitignore √© um arquivo oculto
# ls -la
Edite o arquivo .gitignore e adicione os arquivos que voc√™ quer ignorar
# cat > .gitignore
# *.txt
Pronto, agora fa√ßa a verifica√ß√£o e ver√° que os seus arquivos .txt est√£o fora
# git status
Agora vamos subir nossos arquivos
# git add .gitignore
# git commit -m "Ignorar arquivos .txt no .gitignore"
Caso queira adicionar ou modificar o .gitignore basta editar
# cat >> .gitignore
Vamos ignorar mais um
# nomeQualquer.xml
Verifique o status
# git status
Vamos ignorar um diret√≥rio (pasta)
# cat >> .gitignore
Nome do diret√≥rio + / a barra indica que √© um diret√≥rio e tudo que est√° dentro ser√° ignorado 
# nomeDoDiretorio/
Depois de ignorar tudo que for preciso, j√° podemos subir nossos arquivos
# git status
# git add .
# git commit -m "Arquivos .txt .xml e pasta tal/ foram ignorados"
# git push
Pronto

// 2.4 - Git push, pull, fetch
// git push
Vamos direto ao ponto, crie seu diret√≥rio no github, copie o link, comente se quiser, crie o README.md se quiser. Coloque em p√∫blico ou privado.

Agora abra a pasta que voc√™ quer conectar remotamente com seu github e inicie o git
# git init
# git remote add origin git@github.com:DiSerafim/Serafim.git

Pronto agora vc j√° pode criar seus arquivos em sua pasta do seu projeto ex:
# arquivo.html
# git status
# git add arquivo.html
# git commit -m "Adiciona o arquivo.html"
# git push -u origin master
E.. pronto.

// git pull
Vamos clonar um reposit√≥rio, primeiro v√° para o local onde quer fazer seu clone, depois:
# git clone git@github.com:DiSerafim/Serafim.git
# ls
# cd nomeDocloneCriado
# ls

Agora voc√™ pode fazer as autera√ß√µes que deseja e:
# git add alteracoesFeitas.html
# git commit -m "Altera√ß√µes feitas no arquivo alteracoesFeitas.html"

Digamos que mais alguem tamb√©m est√° trabalhando no mesmo arquivo que voc·∫Ω. √â a√≠ que entra o fetch
antes de subir seu arquivo final d√™ um fetch

// fetch
git fetch
Verifique o status
# git status
√â ai que entra o git pull. Quando outras pessoas modificam o arquivo

// git pull
Agora voc√™ ter√° seu arquivo atualizado e com todas as altera√ß√µes que foram feitas pelos outros usu√°rios
Verifique se esta tudo em ordem, ou fa√ßa as suas altera√ß√µes e:
# git add alteracoesFeitas.html
# git commit -m "Adicionando minhas altera√ß√µes feitas"
# git push
E.. pronto

// 2.5 - Pull Request no GitHub
Vamos observar o processo a baixo:
1 - Navegue at√© a p√°gina principal do reposit√≥rio no GitHub.
2 - No menu "Branch", voc√™ pode digitar o nome da sua nova branch e clicar em Create new branch.
3 - Acima da lista de arquivos, clique em Pull request .
4 - Use o menu suspenso do branch base para selecionar o branch em que deseja fazer merge de suas altera√ß√µes. Em seguida, use o menu suspenso do branch de compara√ß√£o para escolher o branch de t√≥pico no qual voc√™ fez as altera√ß√µes.

Obs: Para seguir para o passo 5 √© preciso ter o primeiro commit realizado, caso tenha dificuldades em realizar pelo GitHub, siga a dica Extra realizando pelo seu terminal.

5 - Digite um t√≠tulo e uma descri√ß√£o para a pull request.
6 - Para criar um pull request que est√° pronto para revis√£o, clique em Criar Pull Request. Para criar um rascunho de pull request, use o menu suspenso e selecione Criar rascunho de pull request e, em seguida, clique em Rascunho de Pull Request.

Obs: Voc√™ tamb√©m pode criar o pull request, ap√≥s fazer o git push na sua m√°quina local. Aparecendo logo ap√≥s o push o bot√£o Comparar e Pull Request:

// Parte 3 - Code Review

As duas principais vantagens que a Code Review traz s√£o:
// Legibilidade do c√≥digo;
Para que o restante do time entenda o seu c√≥digo voc√™ vai precisar se preocupar com coisas como: nome na declara√ß√£o de vari√°veis, nome das fun√ß√µes e outros pontos relativos ao design do seu c√≥digo.

// Transmiss√£o de conhecimento.
Realizar a Code Review de outras pessoas ou ter revisores olhando para o seu c√≥digo √© extremamente eficiente para o aprendizado, j√° que voc√™ passa a ter diferentes pontos de vista para o mesmo problema.

// Exerc√≠cio QUIZ

Qual o comando Git utilizado para verificar o status dos arquivos que foram editados? *
git log
git commit
git status X
git add


Qual o comando respons√°vel por mostrar a vers√£o instalada do seu Git? *
git --stat
git --version X
git version X
git log


Qual o comando respons√°vel por iniciar um reposit√≥rio local no Git? *
git start
git str
git init X
git push

Qual o comando Git que permite que voc√™ copie um reposit√≥rio remoto (Github) para sua maquina? *
git pull 
git push
git clone X
git commit

Qual o comando Git utilizado para ver o hist√≥rico dos seus commits? *
git pull
git history
git log X
git lp

Qual a sequ√™ncia de comandos que seleciona um arquivo espec√≠fico e o salva em seu reposit√≥rio local? *
git commit -m "msg" && git add .
git add arquivo && git commit -r "msg"
git commit -am "msg"
git add arquivo && git commit -m "msg" X

// Exerc√≠cio Agora a pr√°tica

1 - Navegue at√© a raiz do projeto com o arquivo .txt;
# cd exercises-2.2

2 - Verifique se n√£o existe nada sem "commitar" utilizando git status;
# git status

3 - Caso exista algo, verifique se √© necess√°rio e fa√ßa o commit , ou remova-o.
# git commit -m "dando push dentro da pasta bloco_2/exercises-2.2" 

4 - Crie uma nova branch com o nome trybe-skills-changes e fa√ßa checkout nela;
# git checkout trybe-skills-changes

5 - No arquivo .txt , ao final da lista de habilidades , adicione mais duas habilidades que ser√£o desenvolvidas na Trybe;
# git checkout master

6 - Verifique que voc√™ est√° na branch master , com o comando: git branch (esta branch deve estar com o formato original, sem as habilidades rec√©m adicionadas);
 # git branch

7 - Crie uma nova branch trybe-skills-updates a partir da master e fa√ßa checkout nela;
 # git checkout -b trybe-skills-updates

8 - No mesmo arquivo .txt que voc√™ modificou no passo 4 , tamb√©m ao final da sua lista de habilidades, adicione mais um aprendizado que voc√™ ter√° nos pr√≥ximos blocos;
# Fa√ßa um git add nome-do-arquivo.extensao
# Agora um git commit -m "Mensagem que voc√™ gostaria"
# e por √∫ltimo um git push -u origin trybe-skills-updates
# Ap√≥s o primeiro "push" da sua branch, voc√™ pode usar apenas o # comando git push
# Abra um Pull Request com uma descri√ß√£o amig√°vel.

// Recapitulando
O Git √© um sistema de versionamento distribu√≠do (DVCS);

A maior vantagem do Git √© que ele √© distribu√≠do, ou seja, o reposit√≥rio fica na sua m√°quina e voc√™ n√£o precisa se preocupar em fazer "lock" de arquivos assim como em outros VCS's;

Vimos que a instala√ß√£o do Git e sua configura√ß√£o s√£o simples. Basta baixar o instalador e configur√°-lo usando o comando git config;

Para iniciar um reposit√≥rio local, vimos que voc√™ tem duas op√ß√µes:

git init (para criar um novo reposit√≥rio Git );

git clone (para copiar um reposit√≥rio Git existente para sua m√°quina e, assim, poder criar branches e Pull Requests).

O GitHub √© uma plataforma de hospedagem de c√≥digo-fonte com controle de vers√£o usando o Git;

Vimos tamb√©m que, para subir seu c√≥digo para o GitHub , basta voc√™ verificar qual das op√ß√µes abaixo deseja:

Criar um reposit√≥rio do zero localmente, na sua m√°quina, onde utilizar√° o comando git init;

Trabalhar num reposit√≥rio j√° existente, onde utilizar√° o comando git clone;

Esses dois comandos s√£o excludentes , ou seja, voc√™ ou usa um, ou usa o outro, nunca os dois ao mesmo tempo. Ap√≥s isso, siga um dos dois fluxos abaixo:

Fluxo 1 - Ap√≥s git init;
Criar seu primeiro commit ;
Criar o reposit√≥rio remoto na sua conta do GitHub ;
Adicionar a URL do reposit√≥rio remoto;
Executar o famoso push.

Fluxo 2 - Ap√≥s git clone;
Criar sua branch dentro do reposit√≥rio clonado;
Fazer checkout na sua branch;
Criar seu primeiro commit;
Executar o famoso push.
